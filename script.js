// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const state = {
    selectedLanguage: '',
    selectedLevel: '',
    currentQuestion: 0,
    score: 0,
    timer: null,
    timePerQuestion: 50,
    isDarkTheme: localStorage.getItem('theme') === 'dark',
    hintsAvailable: 3,
    xpBoosterActive: false,
    coins: parseInt(localStorage.getItem('coins')) || 0,
    dailyTasks: [
    { description: "–ü—Ä–æ–π—Ç–∏ 5 –≤–æ–ø—Ä–æ—Å–æ–≤", target: 5, progress: 0, reward: 10 },
    { description: "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 20 XP", target: 20, progress: 0, reward: 15 },
    { description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É", target: 1, progress: 0, reward: 5 }
    ],
    userProfile: {
        level: parseInt(localStorage.getItem('userLevel')) || 1,
        xp: parseInt(localStorage.getItem('userXP')) || 0,
        totalQuestions: parseInt(localStorage.getItem('totalQuestions')) || 0,
        correctAnswers: parseInt(localStorage.getItem('correctAnswers')) || 0,
        achievements: JSON.parse(localStorage.getItem('achievements')) || []
    },
    xpToNextLevel: 100,
    hints: {
        regular: 3,
        fiftyFifty: 2,
        skipQuestion: 1,
        extraTime: 3
    },
    achievements: [
        { id: 'first_win', name: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞', description: '–û—Ç–≤–µ—Ç—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å', icon: 'üéØ' },
        { id: 'perfect_score', name: '–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç', description: '–ü–æ–ª—É—á–∏—Ç–µ 100% –∑–∞ —Ç–µ—Å—Ç', icon: 'üèÜ' },
        { id: 'speed_demon', name: '–ë—ã—Å—Ç—Ä—ã–π –∫–∞–∫ –º–æ–ª–Ω–∏—è', description: '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∑–∞ 5 —Å–µ–∫—É–Ω–¥', icon: '‚ö°' },
        { id: 'rich_student', name: '–ë–æ–≥–∞—Ç—ã–π —Å—Ç—É–¥–µ–Ω—Ç', description: '–ù–∞–∫–æ–ø–∏—Ç–µ 1000 –º–æ–Ω–µ—Ç', icon: 'üí∞' },
        { id: 'speed_master', name: '–ú–∞—Å—Ç–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏', description: '–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞ –ø–æ–ª–æ–≤–∏–Ω—É –≤—Ä–µ–º–µ–Ω–∏', icon: '‚ö°' },
        { id: 'daily_hero', name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–µ—Ä–æ–π', description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è', icon: 'üåü' },
        { id: 'hint_master', name: '–ú–∞—Å—Ç–µ—Ä –ø–æ–¥—Å–∫–∞–∑–æ–∫', description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ —Ç–∏–ø—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫', icon: 'üí°' }
    ]
};

// –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
const questions = {
    english: {
        A1: [
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '—è–±–ª–æ–∫–æ' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?",
                answers: ["apple", "banana", "orange", "grape"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '–∫–Ω–∏–≥–∞' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?",
                answers: ["book", "pen", "desk", "chair"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: 'She go to school.'",
                correctAnswer: "She goes to school."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '—Å–æ–±–∞–∫–∞' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?",
                answers: ["dog", "cat", "bird", "fish"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '–¥–æ–º' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?",
                answers: ["house", "apartment", "building", "room"],
                correct: 1
            }
        ],
        A2: [
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '–∑–∞–≤—Ç—Ä–∞–∫' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?",
                answers: ["breakfast", "lunch", "dinner", "snack"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: 'I am go to the park.'",
                correctAnswer: "I am going to the park."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '–ø–æ–≥–æ–¥–∞' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?",
                answers: ["weather", "season", "temperature", "climate"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: 'She don't like coffee.'",
                correctAnswer: "She doesn't like coffee."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '—Ä–∞–±–æ—Ç–∞' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º?",
                answers: ["job", "work", "office", "career"],
                correct: 2
            }
        ],
        B1: [
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: 'I ___ (to live) in London for 5 years.'",
                answers: ["have lived", "lived", "had lived"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: 'If I was you, I would go.'",
                correctAnswer: "If I were you, I would go."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: 'By the time we arrived, the movie ___ (to start).'",
                answers: ["had started", "started", "has started"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: 'She ___ (to live) here since 2010.'",
                answers: ["has lived", "lived", "had lived"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: 'The book was wrote by him.'",
                correctAnswer: "The book was written by him."
            }
        ],
        B2: [
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: 'I wish I ___ (to be) there yesterday.'",
                answers: ["was", "were", "had been"],
                correct: 3
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: 'He said he will come tomorrow.'",
                correctAnswer: "He said he would come tomorrow."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: 'This is the best movie I ___ (to see).'",
                answers: ["have ever seen", "had ever seen", "saw"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: 'She has been working here since 5 years.'",
                correctAnswer: "She has been working here for 5 years."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: 'If he ___ (to call), tell him I'm busy.'",
                answers: ["calls", "will call", "called"],
                correct: 1
            }
        ],
        C1: [
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: 'If I ___ (to know), I would tell you.'",
                answers: ["knew", "know", "had known"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: 'If I was you, I would go.'",
                correctAnswer: "If I were you, I would go."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: 'By the time we arrived, the movie ___ (to start).'",
                answers: ["had started", "started", "has started"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: 'She ___ (to live) here since 2010.'",
                answers: ["has lived", "lived", "had lived"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: 'The book was wrote by him.'",
                correctAnswer: "The book was written by him."
            }
        ],
        C2: [
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: 'Had I known, I ___ (to tell) you.'",
                answers: ["would have told", "would tell", "told"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: 'The meeting was hold in the main hall.'",
                correctAnswer: "The meeting was held in the main hall."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: 'No sooner ___ (to arrive) than the meeting started.'",
                answers: ["had I arrived", "I arrived", "did I arrive"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: 'He speaks English as if he is a native speaker.'",
                correctAnswer: "He speaks English as if he were a native speaker."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: 'Hardly ___ (to finish) the report when the boss called.'",
                answers: ["had I finished", "I finished", "did I finish"],
                correct: 1
            }
        ]
    },
    bulgarian: {
        A1: [
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '—è–±–ª–æ–∫–æ' –Ω–∞ –±–æ–ª–≥–∞—Ä—Å–∫–æ–º?",
                answers: ["—è–±—ä–ª–∫–∞", "–∫—Ä—É—à–∞", "—Å–ª–∏–≤–∞", "–ø—Ä–∞—Å–∫–æ–≤–∞"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '–∫–Ω–∏–≥–∞' –Ω–∞ –±–æ–ª–≥–∞—Ä—Å–∫–æ–º?",
                answers: ["–∫–Ω–∏–≥–∞", "–º–æ–ª–∏–≤", "—Å—Ç–æ–ª", "—Å—Ç–æ–ª—á–µ"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: '–¢–æ–π –æ—Ç–∏–¥–µ –Ω–∞ —É—á–∏–ª–∏—â–µ.'",
                correctAnswer: "–¢–æ–π –æ—Ç–∏–≤–∞ –Ω–∞ —É—á–∏–ª–∏—â–µ."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '–¥–æ–º' –Ω–∞ –±–æ–ª–≥–∞—Ä—Å–∫–æ–º?",
                answers: ["–∫—ä—â–∞", "–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", "—Å–≥—Ä–∞–¥–∞", "—Å—Ç–∞—è"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '–º–∞—à–∏–Ω–∞' –Ω–∞ –±–æ–ª–≥–∞—Ä—Å–∫–æ–º?",
                answers: ["–∫–æ–ª–∞", "–∞–≤—Ç–æ–±—É—Å", "–≤–ª–∞–∫", "–∫–æ–ª–µ–ª–æ"],
                correct: 1
            }
        ],
        A2: [
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '–∑–∞–≤—Ç—Ä–∞–∫' –Ω–∞ –±–æ–ª–≥–∞—Ä—Å–∫–æ–º?",
                answers: ["–∑–∞–∫—É—Å–∫–∞", "–æ–±—è–¥", "–≤–µ—á–µ—Ä—è", "–º–µ–∑–µ"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: '–¢—è –æ—Ç–∏–¥–µ –Ω–∞ —Ä–∞–±–æ—Ç–∞.'",
                correctAnswer: "–¢—è –æ—Ç–∏–≤–∞ –Ω–∞ —Ä–∞–±–æ—Ç–∞."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '–ø–æ–≥–æ–¥–∞' –Ω–∞ –±–æ–ª–≥–∞—Ä—Å–∫–æ–º?",
                answers: ["–≤—Ä–µ–º–µ", "—Å–µ–∑–æ–Ω", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–∫–ª–∏–º–∞—Ç"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: '–¢–µ –Ω–µ —Ö–∞—Ä–µ—Å–≤–∞ –∫–∞—Ñ–µ.'",
                correctAnswer: "–¢–µ –Ω–µ —Ö–∞—Ä–µ—Å–≤–∞—Ç –∫–∞—Ñ–µ."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å '—Ä–∞–±–æ—Ç–∞' –Ω–∞ –±–æ–ª–≥–∞—Ä—Å–∫–æ–º?",
                answers: ["—Ä–∞–±–æ—Ç–∞", "–¥–ª—ä–∂–Ω–æ—Å—Ç", "–æ—Ñ–∏—Å", "–∫–∞—Ä–∏–µ—Ä–∞"],
                correct: 1
            }
        ],
        B1: [
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: '–ê–∫–æ –∞–∑ ___ (–∑–Ω–∞–µ—Ö), —â—è—Ö –¥–∞ —Ç–∏ –∫–∞–∂–∞.'",
                answers: ["–∑–Ω–∞–µ—Ö", "–∑–Ω–∞–µ—à–µ", "–∑–Ω–∞–µ–ª"],
                correct: 2
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: '–ê–∫–æ –±—è—Ö —Ç–∏, —â—è—Ö –¥–∞ –æ—Ç–∏–¥–∞.'",
                correctAnswer: "–ê–∫–æ –±—è—Ö —Ç–∏, —â—è—Ö –¥–∞ –æ—Ç–∏–¥–∞."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: '–ö–æ–≥–∞—Ç–æ —Ç–æ–π –¥–æ–π–¥–µ, –∞–∑ ___ (–≤–µ—á–µ –¥–∞ —Å—ä–º –∏–∑–ª—è–∑—ä–ª).'",
                answers: ["–≤–µ—á–µ –±—è—Ö –∏–∑–ª—è–∑—ä–ª", "–≤–µ—á–µ —Å—ä–º –∏–∑–ª—è–∑—ä–ª", "–≤–µ—á–µ —â—è—Ö –¥–∞ —Å—ä–º –∏–∑–ª—è–∑—ä–ª"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: '–¢—è –∫–∞–∑–∞, —á–µ —â–µ –¥–æ–π–¥–µ —É—Ç—Ä–µ.'",
                correctAnswer: "–¢—è –∫–∞–∑–∞, —á–µ —â–µ –¥–æ–π–¥–µ —É—Ç—Ä–µ."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: '–¢–æ–≤–∞ –µ –Ω–∞–π-–¥–æ–±—Ä–∏—è—Ç —Ñ–∏–ª–º, –∫–æ–π—Ç–æ ___ (–≤–∏–∂–¥–∞–º).'",
                answers: ["—Å—ä–º –≤–∏–∂–¥–∞–ª", "–±—è—Ö –≤–∏–∂–¥–∞–ª", "–≤–∏–¥—è—Ö"],
                correct: 1
            }
        ],
        B2: [
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: '–ê–∫–æ —Ç–æ–π ___ (—Å–µ –æ–±–∞–¥–∏), –∫–∞–∂–∏ –º—É, —á–µ —Å—ä–º –∑–∞–µ—Ç.'",
                answers: ["—Å–µ –æ–±–∞–¥–∏", "—â–µ —Å–µ –æ–±–∞–¥–∏", "—Å–µ –æ–±–∞–∂–¥–∞—à–µ"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: '–¢–æ–π —Ä–∞–±–æ—Ç–∏ —Ç—É–∫ –æ—Ç 5 –≥–æ–¥–∏–Ω–∏.'",
                correctAnswer: "–¢–æ–π —Ä–∞–±–æ—Ç–∏ —Ç—É–∫ –æ—Ç 5 –≥–æ–¥–∏–Ω–∏."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: '–¢–æ–≤–∞ –µ –Ω–∞–π-–¥–æ–±—Ä–∏—è—Ç —Ñ–∏–ª–º, –∫–æ–π—Ç–æ ___ (–≤–∏–∂–¥–∞–º).'",
                answers: ["—Å—ä–º –≤–∏–∂–¥–∞–ª", "–±—è—Ö –≤–∏–∂–¥–∞–ª", "–≤–∏–¥—è—Ö"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: '–¢—è –∫–∞–∑–∞, —á–µ —â–µ –¥–æ–π–¥–µ —É—Ç—Ä–µ.'",
                correctAnswer: "–¢—è –∫–∞–∑–∞, —á–µ —â–µ –¥–æ–π–¥–µ —É—Ç—Ä–µ."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: '–ê–∫–æ —Ç–æ–π ___ (—Å–µ –æ–±–∞–¥–∏), –∫–∞–∂–∏ –º—É, —á–µ —Å—ä–º –∑–∞–µ—Ç.'",
                answers: ["—Å–µ –æ–±–∞–¥–∏", "—â–µ —Å–µ –æ–±–∞–¥–∏", "—Å–µ –æ–±–∞–∂–¥–∞—à–µ"],
                correct: 1
            }
        ],
        C1: [
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: '–ê–∫–æ –∞–∑ ___ (–∑–Ω–∞–µ—Ö), —â—è—Ö –¥–∞ —Ç–∏ –∫–∞–∂–∞.'",
                answers: ["–∑–Ω–∞–µ—Ö", "–∑–Ω–∞–µ—à–µ", "–∑–Ω–∞–µ–ª"],
                correct: 2
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: '–ê–∫–æ –±—è—Ö —Ç–∏, —â—è—Ö –¥–∞ –æ—Ç–∏–¥–∞.'",
                correctAnswer: "–ê–∫–æ –±—è—Ö —Ç–∏, —â—è—Ö –¥–∞ –æ—Ç–∏–¥–∞."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: '–ö–æ–≥–∞—Ç–æ —Ç–æ–π –¥–æ–π–¥–µ, –∞–∑ ___ (–≤–µ—á–µ –¥–∞ —Å—ä–º –∏–∑–ª—è–∑—ä–ª).'",
                answers: ["–≤–µ—á–µ –±—è—Ö –∏–∑–ª—è–∑—ä–ª", "–≤–µ—á–µ —Å—ä–º –∏–∑–ª—è–∑—ä–ª", "–≤–µ—á–µ —â—è—Ö –¥–∞ —Å—ä–º –∏–∑–ª—è–∑—ä–ª"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: '–¢—è –∫–∞–∑–∞, —á–µ —â–µ –¥–æ–π–¥–µ —É—Ç—Ä–µ.'",
                correctAnswer: "–¢—è –∫–∞–∑–∞, —á–µ —â–µ –¥–æ–π–¥–µ —É—Ç—Ä–µ."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: '–¢–æ–≤–∞ –µ –Ω–∞–π-–¥–æ–±—Ä–∏—è—Ç —Ñ–∏–ª–º, –∫–æ–π—Ç–æ ___ (–≤–∏–∂–¥–∞–º).'",
                answers: ["—Å—ä–º –≤–∏–∂–¥–∞–ª", "–±—è—Ö –≤–∏–∂–¥–∞–ª", "–≤–∏–¥—è—Ö"],
                correct: 1
            }
        ],
        C2: [
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: '–ê–∫–æ –±—è—Ö –∑–Ω–∞–µ–ª, —â—è—Ö –¥–∞ —Ç–∏ ___ (–∫–∞–∂–∞).'",
                answers: ["–∫–∞–∂–∞", "–∫–∞–∂–µ—Ö", "–±—è—Ö –∫–∞–∑–∞–ª"],
                correct: 3
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: '–¢–æ–π –∫–∞–∑–∞, —á–µ —â–µ –¥–æ–π–¥–µ —É—Ç—Ä–µ.'",
                correctAnswer: "–¢–æ–π –∫–∞–∑–∞, —á–µ —â–µ –¥–æ–π–¥–µ —É—Ç—Ä–µ."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: '–ö–æ–≥–∞—Ç–æ —Ç–æ–π –¥–æ–π–¥–µ, –∞–∑ ___ (–≤–µ—á–µ –¥–∞ —Å—ä–º –∏–∑–ª—è–∑—ä–ª).'",
                answers: ["–≤–µ—á–µ –±—è—Ö –∏–∑–ª—è–∑—ä–ª", "–≤–µ—á–µ —Å—ä–º –∏–∑–ª—è–∑—ä–ª", "–≤–µ—á–µ —â—è—Ö –¥–∞ —Å—ä–º –∏–∑–ª—è–∑—ä–ª"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É: '–¢—è –∫–∞–∑–∞, —á–µ —â–µ –¥–æ–π–¥–µ —É—Ç—Ä–µ.'",
                correctAnswer: "–¢—è –∫–∞–∑–∞, —á–µ —â–µ –¥–æ–π–¥–µ —É—Ç—Ä–µ."
            },
            {
                type: "multiple-choice",
                question: "–í—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É: '–¢–æ–≤–∞ –µ –Ω–∞–π-–¥–æ–±—Ä–∏—è—Ç —Ñ–∏–ª–º, –∫–æ–π—Ç–æ ___ (–≤–∏–∂–¥–∞–º).'",
                answers: ["—Å—ä–º –≤–∏–∂–¥–∞–ª", "–±—è—Ö –≤–∏–∂–¥–∞–ª", "–≤–∏–¥—è—Ö"],
                correct: 1
            }
        ]
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    updateSectionStyles();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é
    const sections = document.querySelectorAll('section');
    sections.forEach(section => section.classList.add('hidden'));
    
    const languageSection = document.getElementById('language-choice');
    if (languageSection) {
        languageSection.classList.remove('hidden');
        requestAnimationFrame(() => {
            languageSection.style.opacity = '1';
            languageSection.style.transform = 'translateY(0)';
        });
    }
    
    loadSavedHints();
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é hideAllSections
function hideAllSections() {
    const sections = [
        'language-choice',
        'level-choice',
        'quiz-section',
        'results-section',
        'profile-section',
        'shop-section',
        'daily-tasks-section'
    ];
    
    sections.forEach(sectionId => {
        const element = document.getElementById(sectionId);
        if (element && !element.classList.contains('hidden')) {
            // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            element.style.opacity = '0';
            element.style.transform = 'translateY(-20px)';
            
            // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
            setTimeout(() => {
                element.classList.add('hidden');
            }, 300);
        }
    });
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–µ–∫—Ü–∏–∏
function showSection(sectionId) {
    // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    hideAllSections();
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–∫—Ä—ã—Ç–∏—è
    setTimeout(() => {
        const section = document.getElementById(sectionId);
        if (section) {
            // –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å hidden
            section.classList.remove('hidden');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            section.style.opacity = '0';
            section.style.transform = 'translateY(20px)';
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
            requestAnimationFrame(() => {
                section.style.opacity = '1';
                section.style.transform = 'translateY(0)';
            });
        }
    }, 300);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
function chooseLanguage(lang) {
    state.selectedLanguage = lang;
    showSection('level-choice');
}

function chooseLevel(level) {
    state.selectedLevel = level;
    showSection('quiz-section');
    setTimeout(() => {
    loadQuestions();
    }, 300);
}

function showProfile() {
    showSection('profile-section');
    setTimeout(() => {
        const profileSection = document.getElementById('profile-section');
        const accuracy = state.userProfile.totalQuestions > 0 
            ? Math.round((state.userProfile.correctAnswers / state.userProfile.totalQuestions) * 100) 
            : 0;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const unlockedAchievements = state.achievements.filter(achievement => 
            state.userProfile.achievements.includes(achievement.id)
        );
        
        profileSection.innerHTML = `
            <div class="profile-header">
                <h2>üë§ –ü—Ä–æ—Ñ–∏–ª—å</h2>
                <button onclick="toggleTheme()" class="theme-button">
                    ${state.isDarkTheme ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : 'üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞'}
                </button>
            </div>
            
            <div class="profile-stats">
                <div class="stat-card">
                    <div class="stat-icon">üëë</div>
                    <div class="stat-info">
                        <h3>–£—Ä–æ–≤–µ–Ω—å ${state.userProfile.level}</h3>
                        <div class="xp-progress">
                            <div class="xp-bar" style="width: ${(state.userProfile.xp / state.xpToNextLevel) * 100}%"></div>
                        </div>
                        <p>${state.userProfile.xp}/${state.xpToNextLevel} XP</p>
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon">üìä</div>
                    <div class="stat-info">
                        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                        <p>–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${state.userProfile.totalQuestions}</p>
                        <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${state.userProfile.correctAnswers}</p>
                        <p>–¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%</p>
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon">üí∞</div>
                    <div class="stat-info">
                        <h3>–ú–æ–Ω–µ—Ç—ã</h3>
                        <p>${state.coins} –º–æ–Ω–µ—Ç</p>
                    </div>
                </div>
            </div>
            
            ${unlockedAchievements.length > 0 ? `
                <div class="achievements-section">
                    <h3>üèÜ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                    <div class="achievements-grid">
                        ${unlockedAchievements.map(achievement => `
                            <div class="achievement-card">
                                <div class="achievement-icon">${achievement.icon}</div>
                                <h4>${achievement.name}</h4>
                                <p>${achievement.description}</p>
                            </div>
                        `).join('')}
                    </div>
                </div>
            ` : ''}
        `;
    }, 300);
}

function showShop() {
    showSection('shop-section');
    setTimeout(() => {
        const shopSection = document.getElementById('shop-section');
        shopSection.innerHTML = `
            <div class="shop-header">
                <h2>üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</h2>
                <p class="coins-balance">üí∞ ${state.coins} –º–æ–Ω–µ—Ç</p>
            </div>
            <div class="shop-items">
                <div class="shop-item">
                    <h3>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</h3>
                    <p>–ü–æ–º–æ–∂–µ—Ç —Å —Ç—Ä—É–¥–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º</p>
                    <p class="price">10 –º–æ–Ω–µ—Ç</p>
                    <button onclick="buyHint()" class="shop-button" ${state.coins < 10 ? 'disabled' : ''}>
                        ${state.coins < 10 ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' : '–ö—É–ø–∏—Ç—å'}
                    </button>
                </div>
                <div class="shop-item">
                    <h3>‚ö°Ô∏è –ë—É—Å—Ç–µ—Ä XP</h3>
                    <p>–£–¥–≤–æ–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –Ω–∞ 1 —á–∞—Å</p>
                    <p class="price">30 –º–æ–Ω–µ—Ç</p>
                    <button onclick="buyXPBooster()" class="shop-button" ${state.coins < 30 ? 'disabled' : ''}>
                        ${state.coins < 30 ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' : '–ö—É–ø–∏—Ç—å'}
                    </button>
                </div>
                <div class="shop-item">
                    <h3>‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞</h3>
                    <p>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å</p>
                    <p class="price">15 –º–æ–Ω–µ—Ç</p>
                    <button onclick="buySkip()" class="shop-button" ${state.coins < 15 ? 'disabled' : ''}>
                        ${state.coins < 15 ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' : '–ö—É–ø–∏—Ç—å'}
                    </button>
                </div>
                <div class="shop-item">
                    <h3>‚è∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è</h3>
                    <p>+30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–æ–ø—Ä–æ—Å</p>
                    <p class="price">20 –º–æ–Ω–µ—Ç</p>
                    <button onclick="buyExtraTime()" class="shop-button" ${state.coins < 20 ? 'disabled' : ''}>
                        ${state.coins < 20 ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' : '–ö—É–ø–∏—Ç—å'}
                    </button>
                </div>
            </div>
        `;
    }, 300);
}

function showDailyTasks() {
    showSection('daily-tasks-section');
    setTimeout(() => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ—Å–ª–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–∏
        const tasksSection = document.getElementById('daily-tasks-section');
        // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π ...
    }, 300);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–µ–∫—Ü–∏–π
function updateSectionStyles() {
    const style = document.createElement('style');
    style.textContent = `
        section {
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
            opacity: 1;
            transform: translateY(0);
        }

        section.hidden {
            display: none;
        }

        /* –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ */
        section:not(.hidden) {
            display: block;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes slideOut {
            from {
                opacity: 1;
                transform: translateY(0);
            }
            to {
                opacity: 0;
                transform: translateY(-20px);
            }
        }
    `;
    document.head.appendChild(style);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
function loadQuestions() {
    const quizQuestions = questions[state.selectedLanguage][state.selectedLevel];
    if (quizQuestions && quizQuestions.length > 0) {
        state.currentQuestion = 0;
        state.score = 0;
        showQuestion(quizQuestions);
        startTimer();
    } else {
        document.getElementById('result').textContent = "–í–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.";
    }
}

// –°–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
function hideAllSections() {
    const sections = [
        'language-choice',
        'level-choice',
        'quiz-section',
        'results-section',
        'profile-section',
        'shop-section',
        'daily-tasks-section'
    ];
    
    sections.forEach(section => {
        const element = document.getElementById(section);
        if (element) {
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –Ω–µ —Å–∫—Ä—ã–≤–∞—Ç—å —É–∂–µ —Å–∫—Ä—ã—Ç—ã–µ —Å–µ–∫—Ü–∏–∏
            if (!element.classList.contains('hidden')) {
                element.style.opacity = '0';
                element.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    element.classList.add('hidden');
                }, 300);
            }
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
function toggleTheme() {
    state.isDarkTheme = !state.isDarkTheme;
    document.body.classList.toggle('dark-theme');
    localStorage.setItem('theme', state.isDarkTheme ? 'dark' : 'light');
    updateThemeButton();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç–µ–º—ã
function updateThemeButton() {
    const themeButton = document.querySelector('button[onclick="toggleTheme()"]');
    if (themeButton) {
        themeButton.innerHTML = state.isDarkTheme ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : 'üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–Ω–µ—Ç
function updateCoinsDisplay() {
    const coinsDisplays = document.querySelectorAll('.coins-balance');
    coinsDisplays.forEach(display => {
        display.textContent = `üí∞ ${state.coins} –º–æ–Ω–µ—Ç`;
    });
}

// –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞
function showQuestion(quizQuestions) {
    const questionElement = document.getElementById('question');
    const optionsElement = document.getElementById('options');
    const writingElement = document.getElementById('writing');
    const resultElement = document.getElementById('result');
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    optionsElement.innerHTML = '';
    writingElement.innerHTML = '';
    resultElement.textContent = '';
    
    const currentQ = quizQuestions[state.currentQuestion];
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    questionElement.style.opacity = '0';
    questionElement.textContent = currentQ.question;
    setTimeout(() => {
        questionElement.style.opacity = '1';
    }, 100);

    switch (currentQ.type) {
        case "multiple-choice":
            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            const shuffledAnswers = shuffleArray([...currentQ.answers]);
            shuffledAnswers.forEach((answer, index) => {
                const button = document.createElement('button');
                button.textContent = answer;
                button.className = 'option-button';
                button.style.opacity = '0';
                button.style.transform = 'translateY(20px)';
                
                setTimeout(() => {
                    button.style.opacity = '1';
                    button.style.transform = 'translateY(0)';
                }, 150 + index * 100);
                
                button.onclick = () => checkAnswer(currentQ.answers.indexOf(answer) + 1, quizQuestions);
                optionsElement.appendChild(button);
            });
            break;

        case "grammar":
            const inputContainer = document.createElement('div');
            inputContainer.className = 'input-container';
            
            const input = document.createElement('input');
            input.type = "text";
            input.placeholder = "–í–≤–µ–¥–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç...";
            input.className = 'grammar-input';
            
            const submitButton = document.createElement('button');
            submitButton.textContent = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å";
            submitButton.className = 'submit-button';
            
            inputContainer.appendChild(input);
            inputContainer.appendChild(submitButton);
            writingElement.appendChild(inputContainer);
            
            input.focus();
            
            submitButton.onclick = () => checkAnswer(input.value.trim(), quizQuestions);
            input.onkeypress = (e) => {
                if (e.key === 'Enter') {
                    checkAnswer(input.value.trim(), quizQuestions);
                }
            };
            break;
    }
    
    updateProgressBar();

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –ø–æ–¥—Å–∫–∞–∑–æ–∫
    const hintsPanel = document.createElement('div');
    hintsPanel.className = 'hints-panel';
    hintsPanel.innerHTML = `
        <button onclick="useFiftyFifty()" class="hint-button" ${state.hints.fiftyFifty > 0 ? '' : 'disabled'}>
            üí´ 50/50 (${state.hints.fiftyFifty})
        </button>
        <button onclick="useSkipQuestion()" class="hint-button" ${state.hints.skipQuestion > 0 ? '' : 'disabled'}>
            ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å (${state.hints.skipQuestion})
        </button>
        <button onclick="useExtraTime()" class="hint-button" ${state.hints.extraTime > 0 ? '' : 'disabled'}>
            ‚è∞ +30 —Å–µ–∫ (${state.hints.extraTime})
        </button>
    `;
    
    document.getElementById('quiz-section').insertBefore(hintsPanel, optionsElement);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
function checkAnswer(answer, quizQuestions) {
    const resultElement = document.getElementById('result');
    clearInterval(state.timer);
    const currentQ = quizQuestions[state.currentQuestion];
    let isCorrect = false;

    if (currentQ.type === "grammar") {
        isCorrect = answer.toLowerCase() === currentQ.correctAnswer.toLowerCase();
    } else {
        isCorrect = answer === currentQ.correct;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateStatistics(isCorrect);

    if (isCorrect) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç –∏ –º–æ–Ω–µ—Ç—ã
        state.score++;
        state.coins += 5;
        updateCoinsDisplay();
        
        // –î–æ–±–∞–≤–ª—è–µ–º XP
        updateXP(10);
        
        resultElement.innerHTML = `
            <div class="result-message correct-answer">
                <span class="emoji">üéâ</span>
                –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!
                <span class="points">+10 XP ‚Ä¢ +5 –º–æ–Ω–µ—Ç</span>
            </div>
        `;
        
        // –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
        confetti({
            particleCount: 100,
            spread: 70,
            origin: { y: 0.6 }
        });
    } else {
        resultElement.innerHTML = `
            <div class="result-message wrong-answer">
                <span class="emoji">üò¢</span>
                –ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫...
                <div class="correct-text">
                    –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:<br>
                    ${currentQ.correctAnswer || quizQuestions[state.currentQuestion].answers[currentQ.correct - 1]}
                </div>
            </div>
        `;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    checkAchievements();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    localStorage.setItem('coins', state.coins);
    localStorage.setItem('score', state.score);

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        setTimeout(() => {
        state.currentQuestion++;
        if (state.currentQuestion < quizQuestions.length) {
            showQuestion(quizQuestions);
    } else {
            showFinalResults();
        }
    }, 2000);
}

// –ü–æ–∫–∞–∑ –º–∞–≥–∞–∑–∏–Ω–∞
function showShop() {
    showSection('shop-section');
    setTimeout(() => {
        const shopSection = document.getElementById('shop-section');
        shopSection.innerHTML = `
            <div class="shop-header">
                <h2>üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</h2>
                <p class="coins-balance">üí∞ ${state.coins} –º–æ–Ω–µ—Ç</p>
            </div>
            <div class="shop-items">
                <div class="shop-item">
                    <h3>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</h3>
                    <p>–ü–æ–º–æ–∂–µ—Ç —Å —Ç—Ä—É–¥–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º</p>
                    <p class="price">10 –º–æ–Ω–µ—Ç</p>
                    <button onclick="buyHint()" class="shop-button" ${state.coins < 10 ? 'disabled' : ''}>
                        ${state.coins < 10 ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' : '–ö—É–ø–∏—Ç—å'}
                    </button>
                </div>
                <div class="shop-item">
                    <h3>‚ö°Ô∏è –ë—É—Å—Ç–µ—Ä XP</h3>
                    <p>–£–¥–≤–æ–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –Ω–∞ 1 —á–∞—Å</p>
                    <p class="price">30 –º–æ–Ω–µ—Ç</p>
                    <button onclick="buyXPBooster()" class="shop-button" ${state.coins < 30 ? 'disabled' : ''}>
                        ${state.coins < 30 ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' : '–ö—É–ø–∏—Ç—å'}
                    </button>
                </div>
                <div class="shop-item">
                    <h3>‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞</h3>
                    <p>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å</p>
                    <p class="price">15 –º–æ–Ω–µ—Ç</p>
                    <button onclick="buySkip()" class="shop-button" ${state.coins < 15 ? 'disabled' : ''}>
                        ${state.coins < 15 ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' : '–ö—É–ø–∏—Ç—å'}
                    </button>
                </div>
                <div class="shop-item">
                    <h3>‚è∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è</h3>
                    <p>+30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–æ–ø—Ä–æ—Å</p>
                    <p class="price">20 –º–æ–Ω–µ—Ç</p>
                    <button onclick="buyExtraTime()" class="shop-button" ${state.coins < 20 ? 'disabled' : ''}>
                        ${state.coins < 20 ? '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç' : '–ö—É–ø–∏—Ç—å'}
                    </button>
                </div>
            </div>
        `;
    }, 300);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
function updateProgressBar() {
    const progressBar = document.getElementById('progress');
    const quizQuestions = questions[state.selectedLanguage][state.selectedLevel];
    const progress = ((state.currentQuestion + 1) / quizQuestions.length) * 100;
    progressBar.style.width = `${progress}%`;
}

// –ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function showFinalResults() {
    const quizSection = document.getElementById('quiz-section');
    const resultsSection = document.getElementById('results-section');
    
    quizSection.classList.add('hidden');
    resultsSection.classList.remove('hidden');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const totalQuestions = questions[state.selectedLanguage][state.selectedLevel].length;
    const accuracy = Math.round((state.score / totalQuestions) * 100);
    const earnedCoins = state.score * 5;
    const earnedXP = state.score * 10;
    
    const finalScore = document.getElementById('final-score');
    finalScore.innerHTML = `
        <div class="result-message correct-answer">
            <span class="emoji">üéâ</span>
            <h2>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</h2>
            
            <div class="results-stats">
                <div class="result-stat">
                    <div class="stat-icon">‚úÖ</div>
                    <div class="stat-info">
                        <h3>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</h3>
                        <p class="stat-value">${state.score} –∏–∑ ${totalQuestions}</p>
                    </div>
                </div>
                
                <div class="result-stat">
                    <div class="stat-icon">‚≠êÔ∏è</div>
                    <div class="stat-info">
                        <h3>–¢–æ—á–Ω–æ—Å—Ç—å</h3>
                        <p class="stat-value">${accuracy}%</p>
                    </div>
                </div>
                
                <div class="result-stat">
                    <div class="stat-icon">üí∞</div>
                    <div class="stat-info">
                        <h3>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–Ω–µ—Ç</h3>
                        <p class="stat-value">+${earnedCoins}</p>
                    </div>
                </div>
                
                <div class="result-stat">
                    <div class="stat-icon">üìà</div>
                    <div class="stat-info">
                        <h3>–û–ø—ã—Ç</h3>
                        <p class="stat-value">+${earnedXP} XP</p>
                    </div>
                </div>
            </div>
            
            <div class="results-buttons">
                <button onclick="restartQuiz()" class="restart-button">
                    üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑
                </button>
                <button onclick="showProfile()" class="profile-button">
                    üë§ –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å
                </button>
            </div>
        </div>
    `;
    
    // –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    confetti({
        particleCount: 200,
        spread: 90,
        origin: { y: 0.3 }
    });
}

// –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
function startTimer() {
    const timerElement = document.getElementById('timer');
    let timeLeft = state.timePerQuestion;
    
    timerElement.innerHTML = `
        <div class="timer-container">
            <div class="timer-bar"></div>
            <span class="timer-text">${timeLeft}</span>
        </div>
    `;
    
    const timerBar = timerElement.querySelector('.timer-bar');
    const timerText = timerElement.querySelector('.timer-text');
    
    state.timer = setInterval(() => {
        timeLeft--;
        timerText.textContent = timeLeft;
        timerBar.style.width = `${(timeLeft / state.timePerQuestion) * 100}%`;
        
        if (timeLeft <= 5) {
            timerBar.classList.add('timer-warning');
        }
        
        if (timeLeft <= 0) {
            clearInterval(state.timer);
            checkAnswer(null, questions[state.selectedLanguage][state.selectedLevel]);
        }
    }, 1000);
}

// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
function restartQuiz() {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state.currentQuestion = 0;
    state.score = 0;
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    hideAllSections();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    const languageSection = document.getElementById('language-choice');
    languageSection.classList.remove('hidden');
    languageSection.style.opacity = '1';
    languageSection.style.transform = 'translateY(0)';
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –∏ —É—Ä–æ–≤–µ–Ω—å
    state.selectedLanguage = '';
    state.selectedLevel = '';
}

// –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
function buyHint() {
    if (state.coins >= 10) {
        state.coins -= 10;
        state.hints.regular++;
        updateCoinsDisplay();
        showNotification('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∫—É–ø–ª–µ–Ω–∞!', 'success');
        localStorage.setItem('coins', state.coins);
        localStorage.setItem('hints', JSON.stringify(state.hints));
        showShop(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!', 'error');
    }
}

// –ü–æ–∫—É–ø–∫–∞ –±—É—Å—Ç–µ—Ä–∞ –æ–ø—ã—Ç–∞
function buyXPBooster() {
    if (state.coins >= 30) {
        state.coins -= 30;
        state.xpBoosterActive = true;
        updateCoinsDisplay();
        showNotification('‚ö°Ô∏è –ë—É—Å—Ç–µ—Ä XP –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 —á–∞—Å!', 'success');
        localStorage.setItem('coins', state.coins);
        showShop(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±—É—Å—Ç–µ—Ä–∞
        const boosterEndTime = Date.now() + 3600000; // 1 —á–∞—Å
        localStorage.setItem('xpBoosterEndTime', boosterEndTime);
        
        setTimeout(() => {
            state.xpBoosterActive = false;
            showNotification('–î–µ–π—Å—Ç–≤–∏–µ –±—É—Å—Ç–µ—Ä–∞ XP –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å', 'info');
            localStorage.removeItem('xpBoosterEndTime');
        }, 3600000);
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!', 'error');
    }
}

// –ü–æ–∫–∞–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
function showDailyTasks() {
    hideAllSections();
    const tasksSection = document.getElementById('daily-tasks-section');
    
    // –û—á–∏—â–∞–µ–º —Å–µ–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    tasksSection.innerHTML = `
        <div class="tasks-header">
            <div class="tasks-title">
                <h2>üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h2>
                <p class="tasks-subtitle">–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã</p>
            </div>
            <div class="coins-display">
                <p class="coins-balance">üí∞ ${state.coins}</p>
                <p class="coins-label">–º–æ–Ω–µ—Ç</p>
            </div>
        </div>
        <div class="tasks-container">
            ${state.dailyTasks.map(task => `
                <div class="task-card">
                    <div class="task-info">
                        <h4>${task.description}</h4>
                        <p class="task-reward">–ù–∞–≥—Ä–∞–¥–∞: ${task.reward} –º–æ–Ω–µ—Ç</p>
                    </div>
                    <div class="task-progress">
                        <div class="progress-bar">
                            <div class="progress" style="width: ${(task.progress / task.target) * 100}%"></div>
                        </div>
                        <p class="progress-text">${task.progress}/${task.target}</p>
                    </div>
                </div>
            `).join('')}
        </div>
    `;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    tasksSection.classList.remove('hidden');
    requestAnimationFrame(() => {
        tasksSection.style.opacity = '1';
        tasksSection.style.transform = 'translateY(0)';
    });
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
function createNotificationContainer() {
    let container = document.querySelector('.notification-container');
    if (!container) {
        container = document.createElement('div');
        container.className = 'notification-container';
        document.body.appendChild(container);
    }
    return container;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    const container = createNotificationContainer();
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    container.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
        notification.classList.add('show');
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.remove();
            // –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if (container.children.length === 0) {
                container.remove();
            }
        }, 300);
    }, 3000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function showAchievementNotification(achievement) {
    const container = createNotificationContainer();
    const notification = document.createElement('div');
    notification.className = 'achievement-notification';
    notification.innerHTML = `
        <div class="achievement-icon">${achievement.icon}</div>
        <div class="achievement-info">
            <h4>üèÜ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</h4>
            <h4>${achievement.name}</h4>
            <p>${achievement.description}</p>
        </div>
    `;
    
    container.appendChild(notification);
    
    // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
    const audio = new Audio('achievement.mp3');
    audio.play().catch(() => {});
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    requestAnimationFrame(() => {
        notification.classList.add('show');
    });
    
    // –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    confetti({
        particleCount: 100,
        spread: 70,
        origin: { x: 1, y: 0 }
    });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.remove();
            if (container.children.length === 0) {
                container.remove();
            }
        }, 500);
    }, 5000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏–π
function updateTaskProgress(taskType) {
    state.dailyTasks.forEach(task => {
        switch(taskType) {
            case 'question':
                if (task.description.includes('–≤–æ–ø—Ä–æ—Å–æ–≤')) {
                    task.progress = Math.min(task.progress + 1, task.target);
                }
                break;
            case 'xp':
                if (task.description.includes('XP')) {
                    task.progress = Math.min(task.progress + 10, task.target);
                }
                break;
            case 'hint':
                if (task.description.includes('–ø–æ–¥—Å–∫–∞–∑–∫—É')) {
                    task.progress = Math.min(task.progress + 1, task.target);
                }
                break;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        if (task.progress === task.target) {
            state.coins += task.reward;
            showNotification(`–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +${task.reward} –º–æ–Ω–µ—Ç`, 'success');
            updateCoinsDisplay();
            localStorage.setItem('coins', state.coins);
        }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫—Ä—ã—Ç—ã
    const tasksSection = document.getElementById('daily-tasks-section');
    if (!tasksSection.classList.contains('hidden')) {
        showDailyTasks(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
function useHint() {
    if (state.hintsAvailable > 0) {
        state.hintsAvailable--;
        const currentQ = questions[state.selectedLanguage][state.selectedLevel][state.currentQuestion];
        
        let hintText = '';
        if (currentQ.type === 'multiple-choice') {
            const correctAnswer = currentQ.answers[currentQ.correct - 1];
            hintText = `–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "${correctAnswer[0]}"`;
        } else {
            hintText = `–ü–æ–¥—Å–∫–∞–∑–∫–∞: –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º—É –≥–ª–∞–≥–æ–ª–∞`;
        }
        
        showNotification(hintText, 'info');
        updateTaskProgress('hint');
    } else {
        showNotification('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫!', 'error');
    }
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è
function showProfile() {
    showSection('profile-section');
    setTimeout(() => {
        const profileSection = document.getElementById('profile-section');
        const accuracy = state.userProfile.totalQuestions > 0 
            ? Math.round((state.userProfile.correctAnswers / state.userProfile.totalQuestions) * 100) 
            : 0;
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const unlockedAchievements = state.achievements.filter(achievement => 
            state.userProfile.achievements.includes(achievement.id)
        );
        
        profileSection.innerHTML = `
            <div class="profile-header">
                <h2>üë§ –ü—Ä–æ—Ñ–∏–ª—å</h2>
                <button onclick="toggleTheme()" class="theme-button">
                    ${state.isDarkTheme ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : 'üåô –¢—ë–º–Ω–∞—è —Ç–µ–º–∞'}
                </button>
            </div>
            
            <div class="profile-stats">
                <div class="stat-card">
                    <div class="stat-icon">üëë</div>
                    <div class="stat-info">
                        <h3>–£—Ä–æ–≤–µ–Ω—å ${state.userProfile.level}</h3>
                        <div class="xp-progress">
                            <div class="xp-bar" style="width: ${(state.userProfile.xp / state.xpToNextLevel) * 100}%"></div>
                        </div>
                        <p>${state.userProfile.xp}/${state.xpToNextLevel} XP</p>
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon">üìä</div>
                    <div class="stat-info">
                        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                        <p>–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${state.userProfile.totalQuestions}</p>
                        <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${state.userProfile.correctAnswers}</p>
                        <p>–¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%</p>
                    </div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-icon">üí∞</div>
                    <div class="stat-info">
                        <h3>–ú–æ–Ω–µ—Ç—ã</h3>
                        <p>${state.coins} –º–æ–Ω–µ—Ç</p>
                    </div>
                </div>
            </div>
            
            ${unlockedAchievements.length > 0 ? `
                <div class="achievements-section">
                    <h3>üèÜ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                    <div class="achievements-grid">
                        ${unlockedAchievements.map(achievement => `
                            <div class="achievement-card">
                                <div class="achievement-icon">${achievement.icon}</div>
                                <h4>${achievement.name}</h4>
                                <p>${achievement.description}</p>
                            </div>
                        `).join('')}
                    </div>
                </div>
            ` : ''}
        `;
    }, 300);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
function checkAchievements() {
    const achievements = state.achievements;
    const userAchievements = state.userProfile.achievements;
    
    // –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞
    if (!userAchievements.includes('first_win') && state.userProfile.correctAnswers > 0) {
        unlockAchievement('first_win');
    }
    
    // –ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!userAchievements.includes('perfect_score') && 
        state.score === questions[state.selectedLanguage][state.selectedLevel].length) {
        unlockAchievement('perfect_score');
    }
    
    // –ë–æ–≥–∞—Ç—ã–π —Å—Ç—É–¥–µ–Ω—Ç
    if (!userAchievements.includes('rich_student') && state.coins >= 1000) {
        unlockAchievement('rich_student');
    }
}

// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
function unlockAchievement(achievementId) {
    if (!state.userProfile.achievements.includes(achievementId)) {
        state.userProfile.achievements.push(achievementId);
        const achievement = state.achievements.find(a => a.id === achievementId);
        showAchievementNotification(achievement);
        localStorage.setItem('achievements', JSON.stringify(state.userProfile.achievements));
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ XP –∏ —É—Ä–æ–≤–Ω—è
function updateXP(amount) {
    state.userProfile.xp += amount;
    
    while (state.userProfile.xp >= state.xpToNextLevel) {
        state.userProfile.xp -= state.xpToNextLevel;
        state.userProfile.level++;
        showNotification(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${state.userProfile.level} —É—Ä–æ–≤–Ω—è!`, 'success');
    }
    
    localStorage.setItem('userLevel', state.userProfile.level);
    localStorage.setItem('userXP', state.userProfile.xp);
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
function useFiftyFifty() {
    if (state.hints.fiftyFifty > 0) {
        state.hints.fiftyFifty--;
        const buttons = document.querySelectorAll('.option-button');
        const currentQ = questions[state.selectedLanguage][state.selectedLevel][state.currentQuestion];
        const correctAnswer = currentQ.correct;
        
        let removed = 0;
        buttons.forEach((button, index) => {
            if (index + 1 !== correctAnswer && removed < 2) {
                button.style.display = 'none';
                removed++;
            }
        });
        
        showNotification('50/50 –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞!', 'info');
        checkHintAchievement('fiftyFifty');
    } else {
        showNotification('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫ 50/50!', 'error');
    }
}

function useSkipQuestion() {
    if (state.hints.skipQuestion > 0) {
        state.hints.skipQuestion--;
        state.currentQuestion++;
        showQuestion(questions[state.selectedLanguage][state.selectedLevel]);
        showNotification('–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω!', 'info');
        checkHintAchievement('skipQuestion');
    } else {
        showNotification('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞!', 'error');
    }
}

function useExtraTime() {
    if (state.hints.extraTime > 0) {
        state.hints.extraTime--;
        clearInterval(state.timer);
        state.timePerQuestion += 30; // –î–æ–±–∞–≤–ª—è–µ–º 30 —Å–µ–∫—É–Ω–¥
        startTimer();
        showNotification('–î–æ–±–∞–≤–ª–µ–Ω–æ 30 —Å–µ–∫—É–Ω–¥!', 'info');
        checkHintAchievement('extraTime');
    } else {
        showNotification('–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!', 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
function checkHintAchievement(hintType) {
    const usedHints = JSON.parse(localStorage.getItem('usedHints') || '[]');
    if (!usedHints.includes(hintType)) {
        usedHints.push(hintType);
        localStorage.setItem('usedHints', JSON.stringify(usedHints));
        
        if (usedHints.length === Object.keys(state.hints).length) {
            unlockAchievement('hint_master');
        }
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
function buySkip() {
    if (state.coins >= 15) {
        state.coins -= 15;
        state.hints.skipQuestion++;
        updateCoinsDisplay();
        showNotification('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –≤–æ–ø—Ä–æ—Å–∞ –∫—É–ø–ª–µ–Ω!', 'success');
        localStorage.setItem('coins', state.coins);
        localStorage.setItem('hints', JSON.stringify(state.hints));
        showShop(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!', 'error');
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
function buyExtraTime() {
    if (state.coins >= 20) {
        state.coins -= 20;
        state.hints.extraTime++;
        updateCoinsDisplay();
        showNotification('‚è∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫—É–ø–ª–µ–Ω–æ!', 'success');
        localStorage.setItem('coins', state.coins);
        localStorage.setItem('hints', JSON.stringify(state.hints));
        showShop(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!', 'error');
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.buySkip = buySkip;
window.buyExtraTime = buyExtraTime;

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadSavedHints() {
    const savedHints = localStorage.getItem('hints');
    if (savedHints) {
        state.hints = JSON.parse(savedHints);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –±—É—Å—Ç–µ—Ä XP
    const boosterEndTime = localStorage.getItem('xpBoosterEndTime');
    if (boosterEndTime) {
        const timeLeft = boosterEndTime - Date.now();
        if (timeLeft > 0) {
            state.xpBoosterActive = true;
            setTimeout(() => {
                state.xpBoosterActive = false;
                showNotification('–î–µ–π—Å—Ç–≤–∏–µ –±—É—Å—Ç–µ—Ä–∞ XP –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å', 'info');
                localStorage.removeItem('xpBoosterEndTime');
            }, timeLeft);
        } else {
            localStorage.removeItem('xpBoosterEndTime');
        }
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', function() {
    // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
    loadSavedHints();
});

// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.buyHint = buyHint;
window.buyXPBooster = buyXPBooster;
window.buySkip = buySkip;
window.buyExtraTime = buyExtraTime;

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –º–µ–Ω—é
const menuToggle = document.getElementById('menu-toggle');
const sidebar = document.querySelector('.sidebar');
const mainContent = document.querySelector('.main-content');

menuToggle.addEventListener('click', () => {
    sidebar.classList.toggle('open');
    mainContent.classList.toggle('sidebar-open');
    
    // –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É
    const menuIcon = menuToggle.querySelector('.menu-icon');
    if (sidebar.classList.contains('open')) {
        menuIcon.textContent = '√ó';
        menuToggle.style.left = '290px'; // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞
    } else {
        menuIcon.textContent = '‚ò∞';
        menuToggle.style.left = '1rem';
    }
});

// –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
document.addEventListener('click', (e) => {
    if (window.innerWidth <= 768) {
        if (!sidebar.contains(e.target) && !menuToggle.contains(e.target)) {
            sidebar.classList.remove('open');
            mainContent.classList.remove('sidebar-open');
            menuToggle.querySelector('.menu-icon').textContent = '‚ò∞';
            menuToggle.style.left = '1rem';
        }
    }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', () => {
    if (window.innerWidth <= 768) {
        menuToggle.style.left = '1rem';
    } else if (sidebar.classList.contains('open')) {
        menuToggle.style.left = '290px';
    }
});

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
function updateStatistics(isCorrect) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    state.userProfile.totalQuestions++;
    if (isCorrect) {
        state.userProfile.correctAnswers++;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('totalQuestions', state.userProfile.totalQuestions);
    localStorage.setItem('correctAnswers', state.userProfile.correctAnswers);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –ø—Ä–æ—Ñ–∏–ª—å
    updateProfileStats();
}

function updateProfileStats() {
    const profileSection = document.getElementById('profile-section');
    if (!profileSection.classList.contains('hidden')) {
        const accuracy = state.userProfile.totalQuestions > 0 
            ? Math.round((state.userProfile.correctAnswers / state.userProfile.totalQuestions) * 100) 
            : 0;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        const statsHtml = `
            <div class="stats-container">
                <div class="stat-card">
                    <div class="stat-icon">üìä</div>
                    <div class="stat-info">
                        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                        <p>–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${state.userProfile.totalQuestions}</p>
                        <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${state.userProfile.correctAnswers}</p>
                        <p>–¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy}%</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">‚≠êÔ∏è</div>
                    <div class="stat-info">
                        <h3>–£—Ä–æ–≤–µ–Ω—å ${state.userProfile.level}</h3>
                        <div class="xp-progress">
                            <div class="xp-bar" style="width: ${(state.userProfile.xp / state.xpToNextLevel) * 100}%"></div>
                        </div>
                        <p>${state.userProfile.xp}/${state.xpToNextLevel} XP</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">üí∞</div>
                    <div class="stat-info">
                        <h3>–ú–æ–Ω–µ—Ç—ã</h3>
                        <p>${state.coins} –º–æ–Ω–µ—Ç</p>
                    </div>
                </div>
            </div>
        `;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsSection = profileSection.querySelector('.profile-stats');
        if (statsSection) {
            statsSection.innerHTML = statsHtml;
        }
    }
}
