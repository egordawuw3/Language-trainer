// –ì–ª–æ–±–∞–ª–Ω–∏ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏ –∏ —Å—ä—Å—Ç–æ—è–Ω–∏–µ
const state = {
    selectedLanguage: '',
    selectedLevel: '',
    currentQuestion: 0,
    score: 0,
    timer: null,
    timePerQuestion: 50,
    isDarkTheme: localStorage.getItem('theme') === 'dark',
    hintsAvailable: 3,
    xpBoosterActive: false,
    coins: parseInt(localStorage.getItem('coins')) || 0,
    userProfile: {
        level: parseInt(localStorage.getItem('userLevel')) || 1,
        xp: parseInt(localStorage.getItem('userXP')) || 0,
        totalQuestions: parseInt(localStorage.getItem('totalQuestions')) || 0,
        correctAnswers: parseInt(localStorage.getItem('correctAnswers')) || 0,
        achievements: JSON.parse(localStorage.getItem('achievements')) || []
    },
    xpToNextLevel: 100,
    hints: {
        regular: 3,
        fiftyFifty: 2,
        skipQuestion: 1,
        extraTime: 3
    },
    achievements: [
        { id: 'first_win', name: '–ü—ä—Ä–≤–∞ –ø–æ–±–µ–¥–∞', description: '–û—Ç–≥–æ–≤–æ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–æ –Ω–∞ –ø—ä—Ä–≤–∏—è –≤—ä–ø—Ä–æ—Å', icon: 'üéØ' },
        { id: 'perfect_score', name: '–ò–¥–µ–∞–ª–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç', description: '–ü–æ–ª—É—á–µ—Ç–µ 100% –∑–∞ —Ç–µ—Å—Ç', icon: 'üèÜ' },
        { id: 'speed_demon', name: '–ë—ä—Ä–∑ –∫–∞—Ç–æ –º—ä–ª–Ω–∏—è', description: '–û—Ç–≥–æ–≤–æ—Ä–µ—Ç–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å –∑–∞ 5 —Å–µ–∫—É–Ω–¥–∏', icon: '‚ö°' },
        { id: 'rich_student', name: '–ë–æ–≥–∞—Ç —Å—Ç—É–¥–µ–Ω—Ç', description: '–ù–∞—Ç—Ä—É–ø–∞–π—Ç–µ 1000 –º–æ–Ω–µ—Ç–∏', icon: 'üí∞' },
        { id: 'speed_master', name: '–ú–∞–π—Å—Ç–æ—Ä –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—Ç–∞', description: '–û—Ç–≥–æ–≤–æ—Ä–µ—Ç–µ –Ω–∞ –≤—Å–∏—á–∫–∏ –≤—ä–ø—Ä–æ—Å–∏ –∑–∞ –ø–æ–ª–æ–≤–∏–Ω–∞—Ç–∞ –≤—Ä–µ–º–µ', icon: '‚ö°' },
        { id: 'hint_master', name: '–ú–∞–π—Å—Ç–æ—Ä –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏—Ç–µ', description: '–ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –≤—Å–∏—á–∫–∏ –≤–∏–¥–æ–≤–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏', icon: 'üí°' }
    ]
};

// –ë–∞–∑–∞ —Å –≤—ä–ø—Ä–æ—Å–∏
const questions = {
  german: {
        A1: [
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '—è–±—ä–ª–∫–∞' –Ω–∞ –Ω–µ–º—Å–∫–∏?",
                answers: ["Apfel", "Banane", "Orange", "Traube"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '–∫–Ω–∏–≥–∞' –Ω–∞ –Ω–µ–º—Å–∫–∏?",
                answers: ["Buch", "Stift", "Tisch", "Stuhl"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'Sie geht zu Schule.'",
                correctAnswer: "Sie geht zur Schule."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '–∫—É—á–µ' –Ω–∞ –Ω–µ–º—Å–∫–∏?",
                answers: ["Hund", "Katze", "Vogel", "Fisch"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '–∫—ä—â–∞' –Ω–∞ –Ω–µ–º—Å–∫–∏?",
                answers: ["Haus", "Wohnung", "Geb√§ude", "Zimmer"],
                correct: 1
            }
        ],
        A2: [
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '–∑–∞–∫—É—Å–∫–∞' –Ω–∞ –Ω–µ–º—Å–∫–∏?",
                answers: ["Fr√ºhst√ºck", "Mittagessen", "Abendessen", "Snack"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'Ich bin gehe in den Park.'",
                correctAnswer: "Ich gehe in den Park."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '–≤—Ä–µ–º–µ' (–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–Ω–æ) –Ω–∞ –Ω–µ–º—Å–∫–∏?",
                answers: ["Wetter", "Jahreszeit", "Temperatur", "Klima"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'Sie magt kein Kaffee.'",
                correctAnswer: "Sie mag keinen Kaffee."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '—Ä–∞–±–æ—Ç–∞' –Ω–∞ –Ω–µ–º—Å–∫–∏?",
                answers: ["Job", "Arbeit", "B√ºro", "Karriere"],
                correct: 2
            }
        ],
        B1: [
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Ich ___ (wohnen) seit 5 Jahren in London.'",
                answers: ["habe gewohnt", "wohnte", "hatte gewohnt"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'Wenn ich du w√§re, w√ºrde ich gehen.'",
                correctAnswer: "Wenn ich du w√§re, w√ºrde ich gehen."
            },
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Als wir ankamen, ___ (beginnen) der Film.'",
                answers: ["hatte begonnen", "begann", "hat begonnen"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Sie ___ (wohnen) hier seit 2010.'",
                answers: ["hat gewohnt", "wohnte", "hatte gewohnt"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'Das Buch wurde geschrieben von ihm.'",
                correctAnswer: "Das Buch wurde von ihm geschrieben."
            }
        ],
        B2: [
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Ich w√ºnschte, ich ___ (sein) gestern dort.'",
                answers: ["w√§re", "war", "w√§re gewesen"],
                correct: 3
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'Er sagte, er wird morgen kommen.'",
                correctAnswer: "Er sagte, er w√ºrde morgen kommen."
            },
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Das ist der beste Film, den ich ___ (sehen).'",
                answers: ["je gesehen habe", "je gesehen hatte", "sah"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'Sie arbeitet hier seit 5 Jahren.'",
                correctAnswer: "Sie arbeitet hier seit 5 Jahren."
            },
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Wenn er ___ (anrufen), sag ihm, dass ich besch√§ftigt bin.'",
                answers: ["anruft", "anrufen wird", "anrief"],
                correct: 1
            }
        ],
        C1: [
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Wenn ich ___ (wissen), h√§tte ich es dir gesagt.'",
                answers: ["w√ºsste", "wei√ü", "gewusst h√§tte"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'Wenn ich du w√§re, w√ºrde ich gehen.'",
                correctAnswer: "Wenn ich du w√§re, w√ºrde ich gehen."
            },
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Als wir ankamen, ___ (beginnen) der Film.'",
                answers: ["hatte begonnen", "begann", "hat begonnen"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Sie ___ (wohnen) hier seit 2010.'",
                answers: ["hat gewohnt", "wohnte", "hatte gewohnt"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'Das Buch wurde geschrieben von ihm.'",
                correctAnswer: "Das Buch wurde von ihm geschrieben."
            }
        ],
        C2: [
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'H√§tte ich es gewusst, ___ (sagen) ich es dir.'",
                answers: ["h√§tte gesagt", "w√ºrde sagen", "sagte"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'Das Treffen wurde gehalten im Hauptsaal.'",
                correctAnswer: "Das Treffen fand im Hauptsaal statt."
            },
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Kaum ___ (ankommen), begann das Treffen.'",
                answers: ["war ich angekommen", "kam ich an", "bin ich angekommen"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'Er spricht Deutsch, als ob er ist ein Muttersprachler.'",
                correctAnswer: "Er spricht Deutsch, als ob er ein Muttersprachler w√§re."
            },
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Kaum ___ (beenden) ich den Bericht, rief der Chef an.'",
                answers: ["hatte ich beendet", "beendete ich", "habe ich beendet"],
                correct: 1
            }
        ]
    },
        english: {
        A1: [
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ –¥–∞ –∫–∞–∂–µ–º '—è–±—ä–ª–∫–∞' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏?",
                answers: ["apple", "banana", "orange", "grape"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ –¥–∞ –∫–∞–∂–µ–º '–∫–Ω–∏–≥–∞' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏?",
                answers: ["book", "pen", "desk", "chair"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'She go to school.'",
                correctAnswer: "She goes to school."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ –¥–∞ –∫–∞–∂–µ–º '–∫—É—á–µ' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏?",
                answers: ["dog", "cat", "bird", "fish"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ –¥–∞ –∫–∞–∂–µ–º '–∫—ä—â–∞' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏?",
                answers: ["house", "apartment", "building", "room"],
                correct: 1
            }
        ],
        A2: [
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ –¥–∞ –∫–∞–∂–µ–º '–∑–∞–∫—É—Å–∫–∞' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏?",
                answers: ["breakfast", "lunch", "dinner", "snack"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'I am go to the park.'",
                correctAnswer: "I am going to the park."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ –¥–∞ –∫–∞–∂–µ–º '–ø–æ–≥–æ–¥–∞' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏?",
                answers: ["weather", "season", "temperature", "climate"],
                correct: 1
            },
             {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'She don't like coffee.'",
                correctAnswer: "She doesn't like coffee."
            },
            {
                type: "multiple-choice",
                 question: "–ö–∞–∫ –¥–∞ –∫–∞–∂–µ–º '—Ä–∞–±–æ—Ç–∞' –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏?",
                answers: ["job", "work", "office", "career"],
                correct: 2
            }
        ],
        B1: [
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'I ___ (to live) in London for 5 years.'",
                answers: ["have lived", "lived", "had lived"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'If I was you, I would go.'",
                correctAnswer: "If I were you, I would go."
            },
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'By the time we arrived, the movie ___ (to start).'",
                answers: ["had started", "started", "has started"],
                correct: 1
            },
           {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'She ___ (to live) here since 2010.'",
                answers: ["has lived", "lived", "had lived"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'The book was wrote by him.'",
                correctAnswer: "The book was written by him."
            }
        ],
        B2: [
            {
                type: "multiple-choice",
                 question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'I wish I ___ (to be) there yesterday.'",
                answers: ["was", "were", "had been"],
                correct: 3
            },
             {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'He said he will come tomorrow.'",
                correctAnswer: "He said he would come tomorrow."
            },
            {
                 type: "multiple-choice",
                 question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'This is the best movie I ___ (to see).'",
                answers: ["have ever seen", "had ever seen", "saw"],
                correct: 1
            },
            {
                 type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'She has been working here since 5 years.'",
                correctAnswer: "She has been working here for 5 years."
            },
            {
                 type: "multiple-choice",
                  question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'If he ___ (to call), tell him I'm busy.'",
                 answers: ["calls", "will call", "called"],
                correct: 1
            }
        ],
        C1: [
             {
                 type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'If I ___ (to know), I would tell you.'",
                answers: ["knew", "know", "had known"],
                 correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'If I was you, I would go.'",
                correctAnswer: "If I were you, I would go."
            },
             {
                  type: "multiple-choice",
                 question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'By the time we arrived, the movie ___ (to start).'",
                answers: ["had started", "started", "has started"],
                correct: 1
            },
            {
                 type: "multiple-choice",
                 question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'She ___ (to live) here since 2010.'",
                 answers: ["has lived", "lived", "had lived"],
                correct: 1
            },
            {
                 type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'The book was wrote by him.'",
                correctAnswer: "The book was written by him."
            }
        ],
        C2: [
            {
                 type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Had I known, I ___ (to tell) you.'",
                 answers: ["would have told", "would tell", "told"],
                correct: 1
            },
             {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'The meeting was hold in the main hall.'",
                correctAnswer: "The meeting was held in the main hall."
            },
             {
                 type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'No sooner ___ (to arrive) than the meeting started.'",
                answers: ["had I arrived", "I arrived", "did I arrive"],
                 correct: 1
             },
             {
                  type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: 'He speaks English as if he is a native speaker.'",
                 correctAnswer: "He speaks English as if he were a native speaker."
            },
             {
                  type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: 'Hardly ___ (to finish) the report when the boss called.'",
                 answers: ["had I finished", "I finished", "did I finish"],
                correct: 1
            }
        ]
    },
    bulgarian: {
        A1: [
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '—è–±—ä–ª–∫–∞' –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏?",
                answers: ["—è–±—ä–ª–∫–∞", "–±–∞–Ω–∞–Ω", "–ø–æ—Ä—Ç–æ–∫–∞–ª", "–≥—Ä–æ–∑–¥–µ"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '–∫–Ω–∏–≥–∞' –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏?",
                answers: ["–∫–Ω–∏–≥–∞", "—Ö–∏–º–∏–∫–∞–ª–∫–∞", "–±—é—Ä–æ", "—Å—Ç–æ–ª"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: '–¢—è –æ—Ç–∏–¥–µ –≤ —É—á–∏–ª–∏—â–µ.'",
                correctAnswer: "–¢—è –æ—Ç–∏–≤–∞ –≤ —É—á–∏–ª–∏—â–µ."
            },
             {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '–∫—É—á–µ' –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏?",
                answers: ["–∫—É—á–µ", "–∫–æ—Ç–∫–∞", "–ø—Ç–∏—Ü–∞", "—Ä–∏–±–∞"],
                correct: 1
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '–∫—ä—â–∞' –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏?",
                answers: ["–∫—ä—â–∞", "–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç", "—Å–≥—Ä–∞–¥–∞", "—Å—Ç–∞—è"],
                correct: 1
            }
        ],
        A2: [
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '–∑–∞–∫—É—Å–∫–∞' –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏?",
                answers: ["–∑–∞–∫—É—Å–∫–∞", "–æ–±—è–¥", "–≤–µ—á–µ—Ä—è", "–º–µ–∑–µ"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: '–ê–∑ —Å—ä–º –æ—Ç–∏–≤–∞ –≤ –ø–∞—Ä–∫–∞.'",
                correctAnswer: "–ê–∑ –æ—Ç–∏–≤–∞–º –≤ –ø–∞—Ä–∫–∞."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '–≤—Ä–µ–º–µ' (–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥–∏—á–Ω–æ) –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏?",
                answers: ["–≤—Ä–µ–º–µ", "—Å–µ–∑–æ–Ω", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–∫–ª–∏–º–∞—Ç"],
                correct: 1
            },
            {
                type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: '–¢—è –Ω–µ —Ö–∞—Ä–µ—Å–≤–∞–º –∫–∞—Ñ–µ.'",
                correctAnswer: "–¢—è –Ω–µ —Ö–∞—Ä–µ—Å–≤–∞ –∫–∞—Ñ–µ."
            },
            {
                type: "multiple-choice",
                question: "–ö–∞–∫ —Å–µ –∫–∞–∑–≤–∞ '—Ä–∞–±–æ—Ç–∞' –Ω–∞ –±—ä–ª–≥–∞—Ä—Å–∫–∏?",
                answers: ["—Ä–∞–±–æ—Ç–∞", "–∑–∞–Ω—è—Ç–∏–µ", "–æ—Ñ–∏—Å", "–∫–∞—Ä–∏–µ—Ä–∞"],
                correct: 1
            }
        ],
        B1: [
             {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: '–ê–∑ ___ (–∂–∏–≤–µ—è) –≤ –õ–æ–Ω–¥–æ–Ω –æ—Ç 5 –≥–æ–¥–∏–Ω–∏.'",
                answers: ["–∂–∏–≤–µ—è", "—Å—ä–º –∂–∏–≤—è–ª", "–±—è—Ö –∂–∏–≤—è–ª"],
                correct: 1
            },
             {
                type: "grammar",
                 question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: '–ê–∫–æ –±—è—Ö —Ç–∏, —â—è—Ö –¥–∞ –æ—Ç–∏–¥–∞.'",
                correctAnswer: "–ê–∫–æ –±—è—Ö –Ω–∞ —Ç–≤–æ–µ –º—è—Å—Ç–æ, —â—è—Ö –¥–∞ –æ—Ç–∏–¥–∞."
            },
            {
                type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: '–ö–æ–≥–∞—Ç–æ –ø—Ä–∏—Å—Ç–∏–≥–Ω–∞—Ö–º–µ, —Ñ–∏–ª–º—ä—Ç ___ (–∑–∞–ø–æ—á–Ω–µ).'",
                answers: ["–±–µ—à–µ –∑–∞–ø–æ—á–Ω–∞–ª", "–∑–∞–ø–æ—á–Ω–∞", "–µ –∑–∞–ø–æ—á–Ω–∞–ª"],
                correct: 1
            },
             {
                 type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: '–¢—è ___ (–∂–∏–≤–µ—è) —Ç—É–∫ –æ—Ç 2010.'",
                answers: ["–∂–∏–≤–µ–µ", "–µ –∂–∏–≤—è–ª–∞", "–±–µ—à–µ –∂–∏–≤—è–ª–∞"],
                correct: 1
            },
             {
                 type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: '–ö–Ω–∏–≥–∞—Ç–∞ –±–µ—à–µ –Ω–∞–ø–∏—Å–∞–Ω–∞ –æ—Ç –Ω–µ–≥–æ.'",
                correctAnswer: "–ö–Ω–∏–≥–∞—Ç–∞ –±–µ—à–µ –Ω–∞–ø–∏—Å–∞–Ω–∞ –æ—Ç –Ω–µ–≥–æ."
            }
        ],
        B2: [
            {
               type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: '–ò—Å–∫–∞ –º–∏ —Å–µ –¥–∞ –±—è—Ö ___ (—Å—ä–º) —Ç–∞–º –≤—á–µ—Ä–∞.'",
                 answers: ["—Å—ä–º –±–∏–ª", "–±–∏–ª", "–¥–∞ —Å—ä–º –±–∏–ª–∞"],
                correct: 3
            },
            {
                 type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: '–¢–æ–π –∫–∞–∑–∞, —á–µ —â–µ –¥–æ–π–¥–µ —É—Ç—Ä–µ.'",
                 correctAnswer: "–¢–æ–π –∫–∞–∑–∞, —á–µ —â–µ –¥–æ–π–¥–µ —É—Ç—Ä–µ."
            },
            {
                 type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: '–¢–æ–≤–∞ –µ –Ω–∞–π-–¥–æ–±—Ä–∏—è—Ç —Ñ–∏–ª–º, –∫–æ–π—Ç–æ ___ (–≤–∏–∂–¥–∞–º).'",
                 answers: ["—Å—ä–º –≤–∏–∂–¥–∞–ª", "–±—è—Ö –≤–∏–∂–¥–∞–ª", "–≤–∏–∂–¥–∞—Ö"],
                correct: 1
            },
            {
                 type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: '–¢—è —Ä–∞–±–æ—Ç–∏ —Ç—É–∫ –æ—Ç 5 –≥–æ–¥–∏–Ω–∏.'",
                correctAnswer: "–¢—è —Ä–∞–±–æ—Ç–∏ —Ç—É–∫ –æ—Ç 5 –≥–æ–¥–∏–Ω–∏."
            },
            {
                 type: "multiple-choice",
                 question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: '–ê–∫–æ —Ç–æ–π ___ (—Å–µ –æ–±–∞–¥–∏), –∫–∞–∂–∏ –º—É, —á–µ —Å—ä–º –∑–∞–µ—Ç.'",
                answers: ["—Å–µ –æ–±–∞–¥–∏", "—â–µ —Å–µ –æ–±–∞–¥–∏", "—Å–µ –æ–±–∞–∂–¥–∞—à–µ"],
                correct: 1
            }
        ],
         C1: [
             {
                 type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: '–ê–∫–æ ___ (–∑–Ω–∞–µ—Ö), —â—è—Ö –¥–∞ —Ç–∏ –∫–∞–∂–∞.'",
                answers: ["–∑–Ω–∞–µ—Ö", "–∑–Ω–∞—è", "–±—è—Ö –∑–Ω–∞–µ–ª"],
                 correct: 1
            },
             {
                type: "grammar",
                 question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: '–ê–∫–æ –±—è—Ö —Ç–∏, —â—è—Ö –¥–∞ –æ—Ç–∏–¥–∞.'",
                correctAnswer: "–ê–∫–æ –±—è—Ö –Ω–∞ —Ç–≤–æ–µ –º—è—Å—Ç–æ, —â—è—Ö –¥–∞ –æ—Ç–∏–¥–∞."
            },
            {
                 type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: '–ö–æ–≥–∞—Ç–æ –ø—Ä–∏—Å—Ç–∏–≥–Ω–∞—Ö–º–µ, —Ñ–∏–ª–º—ä—Ç ___ (–∑–∞–ø–æ—á–Ω–µ).'",
                 answers: ["–±–µ—à–µ –∑–∞–ø–æ—á–Ω–∞–ª", "–∑–∞–ø–æ—á–Ω–∞", "–µ –∑–∞–ø–æ—á–Ω–∞–ª"],
                correct: 1
            },
             {
                 type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: '–¢—è ___ (–∂–∏–≤–µ—è) —Ç—É–∫ –æ—Ç 2010.'",
                 answers: ["–∂–∏–≤–µ–µ", "–µ –∂–∏–≤—è–ª–∞", "–±–µ—à–µ –∂–∏–≤—è–ª–∞"],
                 correct: 1
            },
             {
                  type: "grammar",
                question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: '–ö–Ω–∏–≥–∞—Ç–∞ –±–µ—à–µ –Ω–∞–ø–∏—Å–∞–Ω–∞ –æ—Ç –Ω–µ–≥–æ.'",
                correctAnswer: "–ö–Ω–∏–≥–∞—Ç–∞ –±–µ—à–µ –Ω–∞–ø–∏—Å–∞–Ω–∞ –æ—Ç –Ω–µ–≥–æ."
            }
        ],
        C2: [
            {
                  type: "multiple-choice",
                 question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: '–ê–∫–æ –±—è—Ö –∑–Ω–∞–µ–ª, —â—è—Ö –¥–∞ —Ç–∏ ___ (–∫–∞–∂–∞).'",
                answers: ["–∫–∞–∂–∞", "–∫–∞–∂–∞,–±–∏—Ö –∫–∞–∑–∞–ª", "–±—è—Ö –∫–∞–∑–∞–ª"],
                correct: 1
            },
             {
                type: "grammar",
                 question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: '–°—Ä–µ—â–∞—Ç–∞ –±–µ—à–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –≤ –≥–ª–∞–≤–Ω–∞—Ç–∞ –∑–∞–ª–∞.'",
                correctAnswer: "–°—Ä–µ—â–∞—Ç–∞ —Å–µ –ø—Ä–æ–≤–µ–¥–µ –≤ –≥–ª–∞–≤–Ω–∞—Ç–∞ –∑–∞–ª–∞."
            },
            {
                  type: "multiple-choice",
                question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: '–ï–¥–≤–∞ –±—è—Ö–º–µ ___ (–ø—Ä–∏—Å—Ç–∏–≥–∞–º), –∫–æ–≥–∞—Ç–æ —Å—Ä–µ—â–∞—Ç–∞ –∑–∞–ø–æ—á–Ω–∞.'",
                answers: ["–ø—Ä–∏—Å—Ç–∏–≥–Ω–∞–ª–∏", "–ø—Ä–∏—Å—Ç–∏–≥–Ω–∞—Ö–º–µ", "–ø—Ä–∏—Å—Ç–∏–≥–Ω–∞–ª–∏ –±—è—Ö–º–µ"],
                 correct: 1
            },
            {
                 type: "grammar",
                 question: "–ü–æ–ø—Ä–∞–≤–µ—Ç–µ –≥—Ä–µ—à–∫–∞—Ç–∞: '–¢–æ–π –≥–æ–≤–æ—Ä–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏, —Å—è–∫–∞—à –µ —Ä–æ–¥–µ–Ω –≥–æ–≤–æ—Ä–∏—Ç–µ–ª.'",
                 correctAnswer: "–¢–æ–π –≥–æ–≤–æ—Ä–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏, —Å—è–∫–∞—à –µ —Ä–æ–¥–µ–Ω –≥–æ–≤–æ—Ä–∏—Ç–µ–ª."
            },
            {
                 type: "multiple-choice",
                  question: "–ò–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–∞–≤–∏–ª–Ω–∞—Ç–∞ —Ñ–æ—Ä–º–∞: '–ï–¥–≤–∞ ___ (–∑–∞–≤—ä—Ä—à–∞) –æ—Ç—á–µ—Ç–∞, —à–µ—Ñ—ä—Ç —Å–µ –æ–±–∞–¥–∏.'",
                answers: ["–±—è—Ö –∑–∞–≤—ä—Ä—à–∏–ª", "–∑–∞–≤—ä—Ä—à–∏—Ö", "–∑–∞–≤—ä—Ä—à–≤–∞—Ö"],
                 correct: 1
            }
        ]
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
document.addEventListener('DOMContentLoaded', function() {
    updateSectionStyles();

    // –ü–æ–∫–∞–∑–≤–∞–º–µ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ —Å–µ–∫—Ü–∏—è
    const sections = document.querySelectorAll('section');
    sections.forEach(section => section.classList.add('hidden'));

    const languageSection = document.getElementById('language-choice');
    if (languageSection) {
        languageSection.classList.remove('hidden');
        requestAnimationFrame(() => {
            languageSection.style.opacity = '1';
            languageSection.style.transform = 'translateY(0)';
        });
    }

    loadSavedHints();
});

// –û–±–Ω–æ–≤—è–≤–∞–º–µ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ hideAllSections
function hideAllSections() {
    const sections = [
        'language-choice',
        'level-choice',
        'quiz-section',
        'results-section',
        'profile-section',
        'shop-section'
    ];

    sections.forEach(sectionId => {
        const element = document.getElementById(sectionId);
        if (element && !element.classList.contains('hidden')) {
            // –ü—ä—Ä–≤–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞
            element.style.opacity = '0';
            element.style.transform = 'translateY(-20px)';

            // –°–ª–µ–¥ –∫—Ä–∞—è –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞ —Å–∫—Ä–∏–≤–∞–º–µ –µ–ª–µ–º–µ–Ω—Ç–∞
            setTimeout(() => {
                element.classList.add('hidden');
            }, 300);
        }
    });
}

// –û–±—â–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Å–µ–∫—Ü–∏—è
function showSection(sectionId) {
    // –ü—ä—Ä–≤–æ —Å–∫—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å–µ–∫—Ü–∏–∏
    hideAllSections();

    // –ò–∑—á–∞–∫–≤–∞–º–µ –∫—Ä–∞—è –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞ –∑–∞ —Å–∫—Ä–∏–≤–∞–Ω–µ
    setTimeout(() => {
        const section = document.getElementById(sectionId);
        if (section) {
            // –ü—ä—Ä–≤–æ –ø—Ä–µ–º–∞—Ö–≤–∞–º–µ –∫–ª–∞—Å–∞ hidden
            section.classList.remove('hidden');

            // –ó–∞–¥–∞–≤–∞–º–µ –Ω–∞—á–∞–ª–Ω–æ —Å—ä—Å—Ç–æ—è–Ω–∏–µ –∑–∞ –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞
            section.style.opacity = '0';
            section.style.transform = 'translateY(20px)';

            // –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –∞–Ω–∏–º–∞—Ü–∏—è—Ç–∞ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ
            requestAnimationFrame(() => {
                section.style.opacity = '1';
                section.style.transform = 'translateY(0)';
            });
        }
    }, 300);
}

// –û–±–Ω–æ–≤—è–≤–∞–º–µ —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ –∑–∞ –ø—Ä–µ–≤–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ —Ä–∞–∑–¥–µ–ª–∏
function chooseLanguage(lang) {
    state.selectedLanguage = lang;
    showSection('level-choice');
}

function chooseLevel(level) {
    state.selectedLevel = level;
    showSection('quiz-section');
    setTimeout(() => {
        loadQuestions();
    }, 300);
}

function showProfile() {
    showSection('profile-section');
    setTimeout(() => {
        const profileSection = document.getElementById('profile-section');
        const accuracy = state.userProfile.totalQuestions > 0
            ? Math.round((state.userProfile.correctAnswers / state.userProfile.totalQuestions) * 100)
            : 0;

        // –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ —Å–∞–º–æ –ø–æ–ª—É—á–µ–Ω–∏—Ç–µ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const unlockedAchievements = state.achievements.filter(achievement =>
            state.userProfile.achievements.includes(achievement.id)
        );

        profileSection.innerHTML = `
            <div class="profile-header">
                <h2>üë§ –ü—Ä–æ—Ñ–∏–ª</h2>
                <button onclick="toggleTheme()" class="theme-button">
                    ${state.isDarkTheme ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞ —Ç–µ–º–∞' : 'üåô –¢—ä–º–Ω–∞ —Ç–µ–º–∞'}
                </button>
            </div>

            <div class="profile-stats">
                <div class="stat-card">
                    <div class="stat-icon">üëë</div>
                    <div class="stat-info">
                        <h3>–ù–∏–≤–æ ${state.userProfile.level}</h3>
                        <div class="xp-progress">
                            <div class="xp-bar" style="width: ${(state.userProfile.xp / state.xpToNextLevel) * 100}%"></div>
                        </div>
                        <p>${state.userProfile.xp}/${state.xpToNextLevel} XP</p>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">üìä</div>
                    <div class="stat-info">
                        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                        <p>–û–±—â–æ –≤—ä–ø—Ä–æ—Å–∏: ${state.userProfile.totalQuestions}</p>
                        <p>–ü—Ä–∞–≤–∏–ª–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏: ${state.userProfile.correctAnswers}</p>
                        <p>–¢–æ—á–Ω–æ—Å—Ç: ${accuracy}%</p>
                    </div>
                </div>

                <div class="stat-card">
                    <div class="stat-icon">üí∞</div>
                    <div class="stat-info">
                        <h3>–ú–æ–Ω–µ—Ç–∏</h3>
                        <p>${state.coins} –º–æ–Ω–µ—Ç–∏</p>
                    </div>
                </div>
            </div>

            ${unlockedAchievements.length > 0 ? `
                <div class="achievements-section">
                    <h3>üèÜ –ü–æ–ª—É—á–µ–Ω–∏ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                    <div class="achievements-grid">
                        ${unlockedAchievements.map(achievement => `
                            <div class="achievement-card">
                                <div class="achievement-icon">${achievement.icon}</div>
                                <h4>${achievement.name}</h4>
                                <p>${achievement.description}</p>
                            </div>
                        `).join('')}
                    </div>
                </div>
            ` : ''}
        `;
    }, 300);
}

function showShop() {
    showSection('shop-section');
    setTimeout(() => {
        const shopSection = document.getElementById('shop-section');
        shopSection.innerHTML = `
            <div class="shop-header">
                <h2>üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</h2>
                <p class="coins-balance">üí∞ ${state.coins} –º–æ–Ω–µ—Ç–∏</p>
            </div>
            <div class="shop-items">
                <div class="shop-item">
                    <h3>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</h3>
                    <p>–ü–æ–º–∞–≥–∞ —Å —Ç—Ä—É–¥–µ–Ω –≤—ä–ø—Ä–æ—Å</p>
                    <p class="price">10 –º–æ–Ω–µ—Ç–∏</p>
                    <button onclick="buyHint()" class="shop-button" ${state.coins < 10 ? 'disabled' : ''}>
                        ${state.coins < 10 ? '–ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –º–æ–Ω–µ—Ç–∏' : '–ö—É–ø–∏'}
                    </button>
                </div>
                            `;
                        }, 300);
                    }


                    // –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å—Ç–∏–ª–æ–≤–µ—Ç–µ –∑–∞ —Å–µ–∫—Ü–∏–∏—Ç–µ
                    function updateSectionStyles() {
                        const style = document.createElement('style');
                        style.textContent = `
                            section {
                                transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
                                opacity: 1;
                                transform: translateY(0);
                            }

                            section.hidden {
                                display: none;
                            }

                            /* –î–æ–±–∞–≤—è–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏—è –∑–∞ –∞–Ω–∏–º–∞—Ü–∏—è */
                            section:not(.hidden) {
                                display: block;
                            }

                            @keyframes slideIn {
                                from {
                                    opacity: 0;
                                    transform: translateY(20px);
                                }
                                to {
                                    opacity: 1;
                                    transform: translateY(0);
                                }
                            }

                            @keyframes slideOut {
                                from {
                                    opacity: 1;
                                    transform: translateY(0);
                                }
                                to {
                                    opacity: 0;
                                    transform: translateY(-20px);
                                }
                            }
                        `;
                        document.head.appendChild(style);
                    }

                    // –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∏
                    function loadQuestions() {
                        const quizQuestions = questions[state.selectedLanguage][state.selectedLevel];
                        if (quizQuestions && quizQuestions.length > 0) {
                            state.currentQuestion = 0;
                            state.score = 0;
                            showQuestion(quizQuestions);
                            startTimer();
                        } else {
                            document.getElementById('result').textContent = "–í—ä–ø—Ä–æ—Å–∏—Ç–µ –∑–∞ —Ç–æ–≤–∞ –Ω–∏–≤–æ –≤—Å–µ –æ—â–µ –Ω–µ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏.";
                        }
                    }

                    // –°–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Å–µ–∫—Ü–∏–∏
                    function hideAllSections() {
                        const sections = [
                            'language-choice',
                            'level-choice',
                            'quiz-section',
                            'results-section',
                            'profile-section',
                            'shop-section'
                        ];

                        sections.forEach(section => {
                            const element = document.getElementById(section);
                            if (element) {
                                // –î–æ–±–∞–≤—è–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞ –¥–∞ –Ω–µ —Å–∫—Ä–∏–≤–∞–º–µ –≤–µ—á–µ —Å–∫—Ä–∏—Ç–∏ —Å–µ–∫—Ü–∏–∏
                                if (!element.classList.contains('hidden')) {
                                    element.style.opacity = '0';
                                    element.style.transform = 'translateY(20px)';
                                    setTimeout(() => {
                                        element.classList.add('hidden');
                                    }, 300);
                                }
                            }
                        });
                    }

                    // –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–µ–≤–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ —Ç–µ–º–∞—Ç–∞
                    function toggleTheme() {
                        state.isDarkTheme = !state.isDarkTheme;
                        document.body.classList.toggle('dark-theme');
                        localStorage.setItem('theme', state.isDarkTheme ? 'dark' : 'light');
                        updateThemeButton();
                    }

                    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –±—É—Ç–æ–Ω–∞ –∑–∞ —Ç–µ–º–∞—Ç–∞
                    function updateThemeButton() {
                        const themeButton = document.querySelector('button[onclick="toggleTheme()"]');
                        if (themeButton) {
                            themeButton.innerHTML = state.isDarkTheme ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞ —Ç–µ–º–∞' : 'üåô –¢—ä–º–Ω–∞ —Ç–µ–º–∞';
                        }
                    }

                    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ –º–æ–Ω–µ—Ç–∏—Ç–µ
                    function updateCoinsDisplay() {
                        const coinsDisplays = document.querySelectorAll('.coins-balance');
                        coinsDisplays.forEach(display => {
                            display.textContent = `üí∞ ${state.coins} –º–æ–Ω–µ—Ç–∏`;
                        });
                    }

                    // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å
                    function showQuestion(quizQuestions) {
                        const questionElement = document.getElementById('question');
                        const optionsElement = document.getElementById('options');
                        const writingElement = document.getElementById('writing');
                        const resultElement = document.getElementById('result');

                        // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –ø—Ä–µ–¥–∏—à–Ω–∏—Ç–µ –µ–ª–µ–º–µ–Ω—Ç–∏
                        optionsElement.innerHTML = '';
                        writingElement.innerHTML = '';
                        resultElement.textContent = '';

                        const currentQ = quizQuestions[state.currentQuestion];

                        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞ –ø–æ—è–≤–∞ –Ω–∞ –≤—ä–ø—Ä–æ—Å–∞
                        questionElement.style.opacity = '0';
                        questionElement.textContent = currentQ.question;
                        setTimeout(() => {
                            questionElement.style.opacity = '1';
                        }, 100);

                        switch (currentQ.type) {
                            case "multiple-choice":
                                // –†–∞–∑–±—ä—Ä–∫–≤–∞–º–µ –≤–∞—Ä–∏–∞–Ω—Ç–∏—Ç–µ –∑–∞ –æ—Ç–≥–æ–≤–æ—Ä
                                const shuffledAnswers = shuffleArray([...currentQ.answers]);
                                shuffledAnswers.forEach((answer, index) => {
                                    const button = document.createElement('button');
                                    button.textContent = answer;
                                    button.className = 'option-button';
                                    button.style.opacity = '0';
                                    button.style.transform = 'translateY(20px)';

                                    setTimeout(() => {
                                        button.style.opacity = '1';
                                        button.style.transform = 'translateY(0)';
                                    }, 150 + index * 100);

                                    button.onclick = () => checkAnswer(currentQ.answers.indexOf(answer) + 1, quizQuestions);
                                    optionsElement.appendChild(button);
                                });
                                break;

                            case "grammar":
                                const inputContainer = document.createElement('div');
                                inputContainer.className = 'input-container';

                                const input = document.createElement('input');
                                input.type = "text";
                                input.placeholder = "–í—ä–≤–µ–¥–µ—Ç–µ –ø–æ–ø—Ä–∞–≤–µ–Ω–∏—è —Ç–µ–∫—Å—Ç...";
                                input.className = 'grammar-input';

                                const submitButton = document.createElement('button');
                                submitButton.textContent = "–ü—Ä–æ–≤–µ—Ä–∏";
                                submitButton.className = 'submit-button';

                                inputContainer.appendChild(input);
                                inputContainer.appendChild(submitButton);
                                writingElement.appendChild(inputContainer);

                                input.focus();

                                submitButton.onclick = () => checkAnswer(input.value.trim(), quizQuestions);
                                input.onkeypress = (e) => {
                                    if (e.key === 'Enter') {
                                        checkAnswer(input.value.trim(), quizQuestions);
                                    }
                                };
                                break;
                        }

                        updateProgressBar();

                        // –î–æ–±–∞–≤—è–º–µ –ø–∞–Ω–µ–ª —Å –ø–æ–¥—Å–∫–∞–∑–∫–∏
                        const hintsPanel = document.createElement('div');
                        hintsPanel.className = 'hints-panel';
                        hintsPanel.innerHTML = `
                            <button onclick="useFiftyFifty()" class="hint-button" ${state.hints.fiftyFifty > 0 ? '' : 'disabled'}>
                                üí´ 50/50 (${state.hints.fiftyFifty})
                            </button>
                            <button onclick="useSkipQuestion()" class="hint-button" ${state.hints.skipQuestion > 0 ? '' : 'disabled'}>
                                ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–Ω–∏ (${state.hints.skipQuestion})
                            </button>
                            <button onclick="useExtraTime()" class="hint-button" ${state.hints.extraTime > 0 ? '' : 'disabled'}>
                                ‚è∞ +30 —Å–µ–∫ (${state.hints.extraTime})
                            </button>
                        `;

                        document.getElementById('quiz-section').insertBefore(hintsPanel, optionsElement);
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞
function checkAnswer(answer, quizQuestions) {
    const resultElement = document.getElementById('result');
    clearInterval(state.timer);
    const currentQ = quizQuestions[state.currentQuestion];
    let isCorrect = false;

    if (currentQ.type === "grammar") {
        isCorrect = answer.toLowerCase() === currentQ.correctAnswer.toLowerCase();
    } else {
        isCorrect = answer === currentQ.correct;
    }

    // –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Ç–∞
    updateStatistics(isCorrect);

    // –ü—É—Å–Ω–∏ –∑–≤—É–∫–æ–≤ –µ—Ñ–µ–∫—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç –æ—Ç –æ—Ç–≥–æ–≤–æ—Ä–∞
    const correctSound = document.getElementById('correct-sound');
    const wrongSound = document.getElementById('wrong-sound');

    if (isCorrect) {
        // –£–≤–µ–ª–∏—á–∞–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –∏ –º–æ–Ω–µ—Ç–∏—Ç–µ
        state.score++;
        state.coins += 5;
        updateCoinsDisplay();

        // –î–æ–±–∞–≤—è–º–µ XP
        updateXP(10);

        resultElement.innerHTML = `
            <div class="result-message correct-answer">
                <span class="emoji">üéâ</span>
                –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∞–≤–∏–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä!
                <span class="points">+10 XP ‚Ä¢ +5 –º–æ–Ω–µ—Ç–∏</span>
            </div>
        `;

        // –ü—É—Å–Ω–∏ –∑–≤—É–∫ –∑–∞ –ø—Ä–∞–≤–∏–ª–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä
        correctSound.currentTime = 0; // –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∑–≤—É–∫–∞
        correctSound.play();

        // –ï—Ñ–µ–∫—Ç –Ω–∞ –∫–æ–Ω—Ñ–µ—Ç–∏
        confetti({
            particleCount: 100,
            spread: 70,
            origin: { y: 0.6 }
        });
    } else {
        resultElement.innerHTML = `
            <div class="result-message wrong-answer">
                <span class="emoji">üò¢</span>
                –ù–µ –µ —Å—ä–≤—Å–µ–º —Ç–∞–∫–∞...
                <div class="correct-text">
                    –ü—Ä–∞–≤–∏–ª–Ω–∏—è—Ç –æ—Ç–≥–æ–≤–æ—Ä –µ:<br>
                    ${currentQ.correctAnswer || quizQuestions[state.currentQuestion].answers[currentQ.correct - 1]}
                </div>
            </div>
        `;

        // –ü—É—Å–Ω–∏ –∑–≤—É–∫ –∑–∞ –≥—Ä–µ—à–µ–Ω –æ—Ç–≥–æ–≤–æ—Ä
        wrongSound.currentTime = 0; // –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∑–≤—É–∫–∞
        wrongSound.play();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    checkAchievements();

    // –ó–∞–ø–∞–∑–≤–∞–º–µ –ø—Ä–æ–≥—Ä–µ—Å–∞
    localStorage.setItem('coins', state.coins);
    localStorage.setItem('score', state.score);

    // –ü—Ä–µ–º–∏–Ω–∞–≤–∞–º–µ –∫—ä–º —Å–ª–µ–¥–≤–∞—â–∏—è –≤—ä–ø—Ä–æ—Å
    setTimeout(() => {
        state.currentQuestion++;
        if (state.currentQuestion < quizQuestions.length) {
            showQuestion(quizQuestions);
        } else {
            showFinalResults();
        }
    }, 2000);
}

                    // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞
                    function showShop() {
                        showSection('shop-section');
                        setTimeout(() => {
                            const shopSection = document.getElementById('shop-section');
                            shopSection.innerHTML = `
                                <div class="shop-header">
                                    <h2>üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</h2>
                                    <p class="coins-balance">üí∞ ${state.coins} –º–æ–Ω–µ—Ç–∏</p>
                                </div>
                                <div class="shop-items">
                                    <div class="shop-item">
                                        <h3>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞</h3>
                                        <p>–ü–æ–º–∞–≥–∞ —Å —Ç—Ä—É–¥–µ–Ω –≤—ä–ø—Ä–æ—Å</p>
                                        <p class="price">10 –º–æ–Ω–µ—Ç–∏</p>
                                        <button onclick="buyHint()" class="shop-button" ${state.coins < 10 ? 'disabled' : ''}>
                                            ${state.coins < 10 ? '–ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –º–æ–Ω–µ—Ç–∏' : '–ö—É–ø–∏'}
                                        </button>
                                    </div>
                                </div>
                            `;
                        }, 300);
                    }

                    // –ü–æ–º–æ—â–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ —Ä–∞–∑–±—ä—Ä–∫–≤–∞–Ω–µ –Ω–∞ –º–∞—Å–∏–≤
                    function shuffleArray(array) {
                        for (let i = array.length - 1; i > 0; i--) {
                            const j = Math.floor(Math.random() * (i + 1));
                            [array[i], array[j]] = [array[j], array[i]];
                        }
                        return array;
                    }

                    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å –±–∞—Ä–∞
                    function updateProgressBar() {
                        const progressBar = document.getElementById('progress');
                        const quizQuestions = questions[state.selectedLanguage][state.selectedLevel];
                        const progress = ((state.currentQuestion + 1) / quizQuestions.length) * 100;
                        progressBar.style.width = `${progress}%`;
                    }

                    // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ñ–∏–Ω–∞–ª–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
                    function showFinalResults() {
                        const quizSection = document.getElementById('quiz-section');
                        const resultsSection = document.getElementById('results-section');

                        quizSection.classList.add('hidden');
                        resultsSection.classList.remove('hidden');

                        // –ó–∞–ø–∞–∑–≤–∞–º–µ —Ñ–∏–Ω–∞–ª–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏
                        const totalQuestions = questions[state.selectedLanguage][state.selectedLevel].length;
                        const accuracy = Math.round((state.score / totalQuestions) * 100);
                        const earnedCoins = state.score * 5;
                        const earnedXP = state.score * 10;

                        const finalScore = document.getElementById('final-score');
                        finalScore.innerHTML = `
                            <div class="result-message correct-answer">
                                <span class="emoji">üéâ</span>
                                <h2>–û—Ç–ª–∏—á–Ω–∞ —Ä–∞–±–æ—Ç–∞!</h2>

                                <div class="results-stats">
                                    <div class="result-stat">
                                        <div class="stat-icon">‚úÖ</div>
                                        <div class="stat-info">
                                            <h3>–ü—Ä–∞–≤–∏–ª–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏</h3>
                                            <p class="stat-value">${state.score} –æ—Ç ${totalQuestions}</p>
                                        </div>
                                    </div>

                                    <div class="result-stat">
                                        <div class="stat-icon">‚≠êÔ∏è</div>
                                        <div class="stat-info">
                                            <h3>–¢–æ—á–Ω–æ—Å—Ç</h3>
                                            <p class="stat-value">${accuracy}%</p>
                                        </div>
                                    </div>

                                    <div class="result-stat">
                                        <div class="stat-icon">üí∞</div>
                                        <div class="stat-info">
                                            <h3>–°–ø–µ—á–µ–ª–µ–Ω–∏ –º–æ–Ω–µ—Ç–∏</h3>
                                            <p class="stat-value">+${earnedCoins}</p>
                                        </div>
                                    </div>

                                    <div class="result-stat">
                                        <div class="stat-icon">üìà</div>
                                        <div class="stat-info">
                                            <h3>–û–ø–∏—Ç</h3>
                                            <p class="stat-value">+${earnedXP} XP</p>
                                        </div>
                                    </div>
                                </div>

                                <div class="results-buttons">
                                    <button onclick="restartQuiz()" class="restart-button">
                                        üîÑ –û–ø–∏—Ç–∞–π –ø–∞–∫
                                    </button>
                                    <button onclick="showProfile()" class="profile-button">
                                        üë§ –ö—ä–º –ø—Ä–æ—Ñ–∏–ª–∞
                                    </button>
                                </div>
                            </div>
                        `;

                        // –ï—Ñ–µ–∫—Ç –Ω–∞ –∫–æ–Ω—Ñ–µ—Ç–∏
                        confetti({
                            particleCount: 200,
                            spread: 90,
                            origin: { y: 0.3 }
                        });
                    }

                    // –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–∞–π–º–µ—Ä–∞
                    function startTimer() {
                        const timerElement = document.getElementById('timer');
                        let timeLeft = state.timePerQuestion;

                        timerElement.innerHTML = `
                            <div class="timer-container">
                                <div class="timer-bar"></div>
                                <span class="timer-text">${timeLeft}</span>
                            </div>
                        `;

                        const timerBar = timerElement.querySelector('.timer-bar');
                        const timerText = timerElement.querySelector('.timer-text');

                        state.timer = setInterval(() => {
                            timeLeft--;
                            timerText.textContent = timeLeft;
                            timerBar.style.width = `${(timeLeft / state.timePerQuestion) * 100}%`;

                            if (timeLeft <= 5) {
                                timerBar.classList.add('timer-warning');
                            }

                            if (timeLeft <= 0) {
                                clearInterval(state.timer);
                                checkAnswer(null, questions[state.selectedLanguage][state.selectedLevel]);
                            }
                        }, 1000);
                    }

                    // –†–µ—Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Ç–µ—Å—Ç–∞
                    function restartQuiz() {
                        // –ù—É–ª–∏—Ä–∞–º–µ —Å—ä—Å—Ç–æ—è–Ω–∏–µ—Ç–æ
                        state.currentQuestion = 0;
                        state.score = 0;

                        // –°–∫—Ä–∏–≤–∞–º–µ –≤—Å–∏—á–∫–∏ —Å–µ–∫—Ü–∏–∏
                        hideAllSections();

                        // –ü–æ–∫–∞–∑–≤–∞–º–µ —Å–µ–∫—Ü–∏—è—Ç–∞ –∑–∞ –∏–∑–±–æ—Ä –Ω–∞ –µ–∑–∏–∫
                        const languageSection = document.getElementById('language-choice');
                        languageSection.classList.remove('hidden');
                        languageSection.style.opacity = '1';
                        languageSection.style.transform = 'translateY(0)';

                        // –ù—É–ª–∏—Ä–∞–º–µ –∏–∑–±—Ä–∞–Ω–∏—è –µ–∑–∏–∫ –∏ –Ω–∏–≤–æ
                        state.selectedLanguage = '';
                        state.selectedLevel = '';
                    }

                    // –ü–æ–∫—É–ø–∫–∞ –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞
                    function buyHint() {
                        if (state.coins >= 10) {
                            state.coins -= 10;
                            state.hints.regular++;
                            updateCoinsDisplay();
                            showNotification('üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –∑–∞–∫—É–ø–µ–Ω–∞!', 'success');
                            localStorage.setItem('coins', state.coins);
                            localStorage.setItem('hints', JSON.stringify(state.hints));
                            showShop(); // –û–±–Ω–æ–≤—è–≤–∞–º–µ –ø–æ–∫–∞–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞
                        } else {
                            showNotification('–ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –º–æ–Ω–µ—Ç–∏!', 'error');
                        }
                    }

                    // –ü–æ–∫—É–ø–∫–∞ –Ω–∞ XP –±—É—Å—Ç–µ—Ä
                    function buyXPBooster() {
                        if (state.coins >= 30) {
                            state.coins -= 30;
                            state.xpBoosterActive = true;
                            updateCoinsDisplay();
                            showNotification('‚ö°Ô∏è XP –±—É—Å—Ç–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω –∑–∞ 1 —á–∞—Å!', 'success');
                            localStorage.setItem('coins', state.coins);
                            showShop(); // –û–±–Ω–æ–≤—è–≤–∞–º–µ –ø–æ–∫–∞–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞

                            // –ó–∞–ø–∞–∑–≤–∞–º–µ –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –±—É—Å—Ç–µ—Ä–∞
                            const boosterEndTime = Date.now() + 3600000; // 1 —á–∞—Å
                            localStorage.setItem('xpBoosterEndTime', boosterEndTime);

                            setTimeout(() => {
                                state.xpBoosterActive = false;
                                showNotification('–î–µ–π—Å—Ç–≤–∏–µ—Ç–æ –Ω–∞ XP –±—É—Å—Ç–µ—Ä–∞ –∏–∑—Ç–µ—á–µ', 'info');
                                localStorage.removeItem('xpBoosterEndTime');
                            }, 3600000);
                        } else {
                            showNotification('–ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –º–æ–Ω–µ—Ç–∏!', 'error');
                        }
                    }

                    // –°—ä–∑–¥–∞–≤–∞–º–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∞–∫–æ –≤—Å–µ –æ—â–µ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
                    function createNotificationContainer() {
                        let container = document.querySelector('.notification-container');
                        if (!container) {
                            container = document.createElement('div');
                            container.className = 'notification-container';
                            document.body.appendChild(container);
                        }
                        return container;
                    }

                    // –û–±–Ω–æ–≤–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    function showNotification(message, type = 'info') {
                        const container = createNotificationContainer();
                        const notification = document.createElement('div');
                        notification.className = `notification ${type}`;
                        notification.textContent = message;

                        container.appendChild(notification);

                        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞ –ø–æ—è–≤—è–≤–∞–Ω–µ
                        requestAnimationFrame(() => {
                            notification.classList.add('show');
                        });

                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
                        setTimeout(() => {
                            notification.classList.remove('show');
                            setTimeout(() => {
                                notification.remove();
                                // –ê–∫–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω—è–º–∞ –ø–æ–≤–µ—á–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏–∑—Ç—Ä–∏–≤–∞–º–µ –≥–æ
                                if (container.children.length === 0) {
                                    container.remove();
                                }
                            }, 300);
                        }, 3000);
                    }

                    // –û–±–Ω–æ–≤–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    function showAchievementNotification(achievement) {
                        const container = createNotificationContainer();
                        const notification = document.createElement('div');
                        notification.className = 'achievement-notification';
                        notification.innerHTML = `
                            <div class="achievement-icon">${achievement.icon}</div>
                            <div class="achievement-info">
                                <h4>üèÜ –ù–æ–≤–æ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</h4>
                                <h4>${achievement.name}</h4>
                                <p>${achievement.description}</p>
                            </div>
                        `;

                        container.appendChild(notification);

                        // –ó–≤—É–∫–æ–≤ –µ—Ñ–µ–∫—Ç
                        const audio = new Audio('achievement.mp3');
                        audio.play().catch(() => {});

                        // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞ –ø–æ—è–≤—è–≤–∞–Ω–µ
                        requestAnimationFrame(() => {
                            notification.classList.add('slideIn');
                        });

                        // –ï—Ñ–µ–∫—Ç –Ω–∞ –∫–æ–Ω—Ñ–µ—Ç–∏
                        confetti({
                            particleCount: 100,
                            spread: 70,
                            origin: { x: 1, y: 0 }
                        });

                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
                        setTimeout(() => {
                            notification.classList.remove('slideIn');
                            setTimeout(() => {
                                notification.remove();
                                if (container.children.length === 0) {
                                    container.remove();
                                }
                            }, 500);
                        }, 5000);
                    }


                    // –ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞
                    function useHint() {
                        if (state.hintsAvailable > 0) {
                            state.hintsAvailable--;
                            const currentQ = questions[state.selectedLanguage][state.selectedLevel][state.currentQuestion];

                            let hintText = '';
                            if (currentQ.type === 'multiple-choice') {
                                const correctAnswer = currentQ.answers[currentQ.correct - 1];
                                hintText = `–ü–æ–¥—Å–∫–∞–∑–∫–∞: –ü—Ä–∞–≤–∏–ª–Ω–∏—è—Ç –æ—Ç–≥–æ–≤–æ—Ä –∑–∞–ø–æ—á–≤–∞ —Å "${correctAnswer[0]}"`;
                            } else {
                                hintText = `–ü–æ–¥—Å–∫–∞–∑–∫–∞: –û–±—ä—Ä–Ω–µ—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≥–æ–ª–∞`;
                            }

                            showNotification(hintText, 'info');

                        } else {
                            showNotification('–ù—è–º–∞—Ç–µ –Ω–∞–ª–∏—á–Ω–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏!', 'error');
                        }
                    }

                    // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∞
                    function showProfile() {
                        showSection('profile-section');
                        setTimeout(() => {
                            const profileSection = document.getElementById('profile-section');
                            const accuracy = state.userProfile.totalQuestions > 0
                                ? Math.round((state.userProfile.correctAnswers / state.userProfile.totalQuestions) * 100)
                                : 0;

                            // –§–∏–ª—Ç—Ä–∏—Ä–∞–º–µ —Å–∞–º–æ –ø–æ–ª—É—á–µ–Ω–∏—Ç–µ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                            const unlockedAchievements = state.achievements.filter(achievement =>
                                state.userProfile.achievements.includes(achievement.id)
                            );

                            profileSection.innerHTML = `
                                <div class="profile-header">
                                    <h2>üë§ –ü—Ä–æ—Ñ–∏–ª</h2>
                                    <button onclick="toggleTheme()" class="theme-button">
                                        ${state.isDarkTheme ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞ —Ç–µ–º–∞' : 'üåô –¢—ä–º–Ω–∞ —Ç–µ–º–∞'}
                                    </button>
                                </div>

                                <div class="profile-stats">
                                    <div class="stat-card">
                                        <div class="stat-icon">üëë</div>
                                        <div class="stat-info">
                                            <h3>–ù–∏–≤–æ ${state.userProfile.level}</h3>
                                            <div class="xp-progress">
                                                <div class="xp-bar" style="width: ${(state.userProfile.xp / state.xpToNextLevel) * 100}%"></div>
                                            </div>
                                            <p>${state.userProfile.xp}/${state.xpToNextLevel} XP</p>
                                        </div>
                                    </div>

                                    <div class="stat-card">
                                        <div class="stat-icon">üìä</div>
                                        <div class="stat-info">
                                            <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                                            <p>–û–±—â–æ –≤—ä–ø—Ä–æ—Å–∏: ${state.userProfile.totalQuestions}</p>
                                            <p>–ü—Ä–∞–≤–∏–ª–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏: ${state.userProfile.correctAnswers}</p>
                                            <p>–¢–æ—á–Ω–æ—Å—Ç: ${accuracy}%</p>
                                        </div>
                                    </div>

                                    <div class="stat-card">
                                        <div class="stat-icon">üí∞</div>
                                        <div class="stat-info">
                                            <h3>–ú–æ–Ω–µ—Ç–∏</h3>
                                            <p>${state.coins} –º–æ–Ω–µ—Ç–∏</p>
                                        </div>
                                    </div>
                                </div>

                                ${unlockedAchievements.length > 0 ? `
                                    <div class="achievements-section">
                                        <h3>üèÜ –ü–æ–ª—É—á–µ–Ω–∏ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
                                        <div class="achievements-grid">
                                            ${unlockedAchievements.map(achievement => `
                                                <div class="achievement-card">
                                                    <div class="achievement-icon">${achievement.icon}</div>
                                                    <h4>${achievement.name}</h4>
                                                    <p>${achievement.description}</p>
                                                </div>
                                            `).join('')}
                                        </div>
                                    </div>
                                ` : ''}
                            `;
                        }, 300);
                    }

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    function checkAchievements() {
                        const achievements = state.achievements;
                        const userAchievements = state.userProfile.achievements;

                        // –ü—ä—Ä–≤–∞ –ø–æ–±–µ–¥–∞
                        if (!userAchievements.includes('first_win') && state.userProfile.correctAnswers > 0) {
                            unlockAchievement('first_win');
                        }

                        // –ò–¥–µ–∞–ª–µ–Ω —Ä–µ–∑—É–ª—Ç–∞—Ç
                        if (!userAchievements.includes('perfect_score') &&
                            state.score === questions[state.selectedLanguage][state.selectedLevel].length) {
                            unlockAchievement('perfect_score');
                        }

                        // –ë–æ–≥–∞—Ç —Å—Ç—É–¥–µ–Ω—Ç
                        if (!userAchievements.includes('rich_student') && state.coins >= 1000) {
                            unlockAchievement('rich_student');
                        }
                    }

                    // –û—Ç–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                    function unlockAchievement(achievementId) {
                        if (!state.userProfile.achievements.includes(achievementId)) {
                            state.userProfile.achievements.push(achievementId);
                            const achievement = state.achievements.find(a => a.id === achievementId);
                            showAchievementNotification(achievement);
                            localStorage.setItem('achievements', JSON.stringify(state.userProfile.achievements));
                        }
                    }

                    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ XP –∏ –Ω–∏–≤–æ—Ç–æ
                    function updateXP(amount) {
                        state.userProfile.xp += amount;

                        while (state.userProfile.xp >= state.xpToNextLevel) {
                            state.userProfile.xp -= state.xpToNextLevel;
                            state.userProfile.level++;
                            showNotification(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –í–∏–µ –¥–æ—Å—Ç–∏–≥–Ω–∞—Ö—Ç–µ –Ω–∏–≤–æ ${state.userProfile.level}!`, 'success');
                        }

                        localStorage.setItem('userLevel', state.userProfile.level);
                        localStorage.setItem('userXP', state.userProfile.xp);
                    }

                    // –§—É–Ω–∫—Ü–∏–∏ –∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
                    function useFiftyFifty() {
                        if (state.hints.fiftyFifty > 0) {
                            state.hints.fiftyFifty--;
                            const buttons = document.querySelectorAll('.option-button');
                            const currentQ = questions[state.selectedLanguage][state.selectedLevel][state.currentQuestion];
                            const correctAnswer = currentQ.correct;

                            let removed = 0;
                            buttons.forEach((button, index) => {
                                if (index + 1 !== correctAnswer && removed < 2) {
                                    button.style.display = 'none';
                                    removed++;
                                }
                            });

                            showNotification('50/50 –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–∞!', 'info');
                            checkHintAchievement('fiftyFifty');
                        } else {
                            showNotification('–ù—è–º–∞—Ç–µ 50/50 –ø–æ–¥—Å–∫–∞–∑–∫–∏!', 'error');
                        }
                    }

                    function useSkipQuestion() {
                        if (state.hints.skipQuestion > 0) {
                            state.hints.skipQuestion--;
                            state.currentQuestion++;
                            showQuestion(questions[state.selectedLanguage][state.selectedLevel]);
                            showNotification('–í—ä–ø—Ä–æ—Å—ä—Ç –µ –ø—Ä–æ–ø—É—Å–Ω–∞—Ç!', 'info');
                            checkHintAchievement('skipQuestion');
                        } else {
                            showNotification('–ù—è–º–∞—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å!', 'error');
                        }
                    }

                    function useExtraTime() {
                        if (state.hints.extraTime > 0) {
                            state.hints.extraTime--;
                            clearInterval(state.timer);
                            state.timePerQuestion += 30; // –î–æ–±–∞–≤—è–º–µ 30 —Å–µ–∫—É–Ω–¥–∏
                            startTimer();
                            showNotification('–î–æ–±–∞–≤–µ–Ω–∏ —Å–∞ 30 —Å–µ–∫—É–Ω–¥–∏!', 'info');
                            checkHintAchievement('extraTime');
                        } else {
                            showNotification('–ù—è–º–∞—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞ —É–¥—ä–ª–∂–∞–≤–∞–Ω–µ –Ω–∞ –≤—Ä–µ–º–µ—Ç–æ!', 'error');
                        }
                    }

                    // –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
                    function checkHintAchievement(hintType) {
                        const usedHints = JSON.parse(localStorage.getItem('usedHints') || '[]');
                        if (!usedHints.includes(hintType)) {
                            usedHints.push(hintType);
                            localStorage.setItem('usedHints', JSON.stringify(usedHints));

                            if (usedHints.length === Object.keys(state.hints).length) {
                                unlockAchievement('hint_master');
                            }
                        }
                    }

                    // –î–æ–±–∞–≤—è–º–µ –Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞–∫—É–ø—É–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å
                    function buySkip() {
                        if (state.coins >= 20) {
                            state.coins -= 20;
                            state.hints.skipQuestion++;
                            updateCoinsDisplay();
                            showNotification('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–Ω–µ –Ω–∞ –≤—ä–ø—Ä–æ—Å –∑–∞–∫—É–ø–µ–Ω–æ!', 'success');
                            localStorage.setItem('coins', state.coins);
                            localStorage.setItem('hints', JSON.stringify(state.hints));
                            showShop(); // –û–±–Ω–æ–≤—è–≤–∞–º–µ –ø–æ–∫–∞–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞
                        } else {
                            showNotification('–ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –º–æ–Ω–µ—Ç–∏!', 'error');
                        }
                    }

                    // –î–æ–±–∞–≤—è–º–µ –Ω–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞–∫—É–ø—É–≤–∞–Ω–µ –Ω–∞ –¥–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–æ –≤—Ä–µ–º–µ
                    function buyExtraTime() {
                        if (state.coins >= 25) {
                            state.coins -= 25;
                            state.hints.extraTime++;
                            updateCoinsDisplay();
                            showNotification('‚è∞ –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–æ –≤—Ä–µ–º–µ –∑–∞–∫—É–ø–µ–Ω–æ!', 'success');
                            localStorage.setItem('coins', state.coins);
                            localStorage.setItem('hints', JSON.stringify(state.hints));
                            showShop(); // –û–±–Ω–æ–≤—è–≤–∞–º–µ –ø–æ–∫–∞–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞
                        } else {
                            showNotification('–ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –º–æ–Ω–µ—Ç–∏!', 'error');
                        }
                    }

                    // –î–æ–±–∞–≤—è–º–µ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∫—É–ø—É–≤–∞–Ω–µ –Ω–∞ 50/50
                    function buyFiftyFifty() {
                        if (state.coins >= 15) {
                            state.coins -= 15;
                            state.hints.fiftyFifty++;
                            updateCoinsDisplay();
                            showNotification('üí´ 50/50 –∑–∞–∫—É–ø–µ–Ω–∞!', 'success');
                            localStorage.setItem('coins', state.coins);
                            localStorage.setItem('hints', JSON.stringify(state.hints));
                            showShop(); // –û–±–Ω–æ–≤—è–≤–∞–º–µ –ø–æ–∫–∞–∑–≤–∞–Ω–µ—Ç–æ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞
                        } else {
                            showNotification('–ù—è–º–∞ –¥–æ—Å—Ç–∞—Ç—ä—á–Ω–æ –º–æ–Ω–µ—Ç–∏!', 'error');
                        }
                    }

                    // –î–æ–±–∞–≤—è–º–µ —Ñ—É–Ω–∫—Ü–∏–∏—Ç–µ –≤ –≥–ª–æ–±–∞–ª–Ω–∏—è scope
                    window.buySkip = buySkip;
                    window.buyExtraTime = buyExtraTime;
                    window.buyFiftyFifty = buyFiftyFifty;

                    // –î–æ–±–∞–≤—è–º–µ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∑–∞–ø–∞–∑–µ–Ω–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ
                    function loadSavedHints() {
                        const savedHints = localStorage.getItem('hints');
                        if (savedHints) {
                            state.hints = JSON.parse(savedHints);
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –∑–∞ –∞–∫—Ç–∏–≤–µ–Ω XP –±—É—Å—Ç–µ—Ä
                        const boosterEndTime = localStorage.getItem('xpBoosterEndTime');
                        if (boosterEndTime) {
                            const timeLeft = boosterEndTime - Date.now();
                            if (timeLeft > 0) {
                                state.xpBoosterActive = true;
                                setTimeout(() => {
                                    state.xpBoosterActive = false;
                                    showNotification('–î–µ–π—Å—Ç–≤–∏–µ—Ç–æ –Ω–∞ XP –±—É—Å—Ç–µ—Ä–∞ –∏–∑—Ç–µ—á–µ', 'info');
                                    localStorage.removeItem('xpBoosterEndTime');
                                }, timeLeft);
                            } else {
                                localStorage.removeItem('xpBoosterEndTime');
                            }
                        }
                    }

                    // –î–æ–±–∞–≤—è–º–µ –∏–∑–≤–∏–∫–≤–∞–Ω–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
                    document.addEventListener('DOMContentLoaded', function() {
                        // ... —Å—ä—â–µ—Å—Ç–≤—É–≤–∞—â –∫–æ–¥ ...
                        loadSavedHints();
                    });

                    // –î–æ–±–∞–≤—è–º–µ –≤—Å–∏—á–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª–Ω–∏—è scope
                    window.buyHint = buyHint;
                    window.buyXPBooster = buyXPBooster;
                    window.buySkip = buySkip;
                    window.buyExtraTime = buyExtraTime;

                    // –î–æ–±–∞–≤—è–º–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç –∑–∞ –º–µ–Ω—é—Ç–æ
                    const menuToggle = document.getElementById('menu-toggle');
                    const sidebar = document.querySelector('.sidebar');
                    const mainContent = document.querySelector('.main-content');

                    menuToggle.addEventListener('click', () => {
                        sidebar.classList.toggle('open');
                        mainContent.classList.toggle('sidebar-open');

                        // –ü—Ä–æ–º–µ–Ω—è–º–µ –∏–∫–æ–Ω–∫–∞—Ç–∞
                        const menuIcon = menuToggle.querySelector('.menu-icon');
                        if (sidebar.classList.contains('open')) {
                            menuIcon.textContent = '√ó';
                            menuToggle.style.left = '290px'; // –ó–∞ –¥–µ—Å–∫—Ç–æ–ø
                        } else {
                            menuIcon.textContent = '‚ò∞';
                            menuToggle.style.left = '1rem';
                        }
                    });

                    // –ó–∞—Ç–≤–∞—Ä—è–º–µ –º–µ–Ω—é—Ç–æ –ø—Ä–∏ –∫–ª–∏–∫ –∏–∑–≤—ä–Ω –Ω–µ–≥–æ –Ω–∞ –º–æ–±–∏–ª–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    document.addEventListener('click', (e) => {
                        if (window.innerWidth <= 768) {
                            if (!sidebar.contains(e.target) && !menuToggle.contains(e.target)) {
                                sidebar.classList.remove('open');
                                mainContent.classList.remove('sidebar-open');
                                menuToggle.querySelector('.menu-icon').textContent = '‚ò∞';
                                menuToggle.style.left = '1rem';
                            }
                        }
                    });

                    // –û–±–Ω–æ–≤—è–≤–∞–º–µ –ø–æ–∑–∏—Ü–∏—è—Ç–∞ –Ω–∞ –±—É—Ç–æ–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–∑–æ—Ä–µ—Ü–∞
                    window.addEventListener('resize', () => {
                        if (window.innerWidth <= 768) {
                            menuToggle.style.left = '1rem';
                        } else if (sidebar.classList.contains('open')) {
                            menuToggle.style.left = '290px';
                        }
                    });

                    // –î–æ–±–∞–≤—è–º–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞ —Ä–∞–±–æ—Ç–∞ —Å—ä—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Ç–∞
                    function updateStatistics(isCorrect) {
                        // –û–±–Ω–æ–≤—è–≤–∞–º–µ –æ–±—â–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        state.userProfile.totalQuestions++;
                        if (isCorrect) {
                            state.userProfile.correctAnswers++;
                        }

                        // –ó–∞–ø–∞–∑–≤–∞–º–µ –≤ localStorage
                        localStorage.setItem('totalQuestions', state.userProfile.totalQuestions);
                        localStorage.setItem('correctAnswers', state.userProfile.correctAnswers);

                        // –û–±–Ω–æ–≤—è–≤–∞–º–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –ø—Ä–æ—Ñ–∏–ª—å
                        // –û–±–Ω–æ–≤—è–≤–∞–º–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç –ø—Ä–æ—Ñ–∏–ª—å
                                    updateProfileStats();
                                }

                                function updateProfileStats() {
                                    const profileSection = document.getElementById('profile-section');
                                    if (!profileSection.classList.contains('hidden')) {
                                        const accuracy = state.userProfile.totalQuestions > 0
                                            ? Math.round((state.userProfile.correctAnswers / state.userProfile.totalQuestions) * 100)
                                            : 0;

                                        // –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–∞
                                        const statsHtml = `
                                            <div class="stats-container">
                                                <div class="stat-card">
                                                    <div class="stat-icon">üìä</div>
                                                    <div class="stat-info">
                                                        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                                                        <p>–û–±—â–æ –≤—ä–ø—Ä–æ—Å–∏: ${state.userProfile.totalQuestions}</p>
                                                        <p>–ü—Ä–∞–≤–∏–ª–Ω–∏ –æ—Ç–≥–æ–≤–æ—Ä–∏: ${state.userProfile.correctAnswers}</p>
                                                        <p>–¢–æ—á–Ω–æ—Å—Ç: ${accuracy}%</p>
                                                    </div>
                                                </div>
                                                <div class="stat-card">
                                                    <div class="stat-icon">‚≠êÔ∏è</div>
                                                    <div class="stat-info">
                                                        <h3>–ù–∏–≤–æ ${state.userProfile.level}</h3>
                                                        <div class="xp-progress">
                                                            <div class="xp-bar" style="width: ${(state.userProfile.xp / state.xpToNextLevel) * 100}%"></div>
                                                        </div>
                                                        <p>${state.userProfile.xp}/${state.xpToNextLevel} XP</p>
                                                    </div>
                                                </div>
                                                <div class="stat-card">
                                                    <div class="stat-icon">üí∞</div>
                                                    <div class="stat-info">
                                                        <h3>–ú–æ–Ω–µ—Ç–∏</h3>
                                                        <p>${state.coins} –º–æ–Ω–µ—Ç–∏</p>
                                                    </div>
                                                </div>
                                            </div>
                                        `;

                                        // –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å–µ–∫—Ü–∏—è—Ç–∞ —Å—ä—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                                        const statsSection = profileSection.querySelector('.profile-stats');
                                        if (statsSection) {
                                            statsSection.innerHTML = statsHtml;
                                        }
                                    }
                                }
